// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : hdmi_demo.v
// Device     : xc7k325t-ffg676-2
// LiteX sha1 : 57bffbbb
// Date       : 2023-06-08 05:16:50
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module hdmi_demo (
    (* dont_touch = "true" *)
    input  wire          clk200_p,
    input  wire          clk200_n,
    input  wire          clk50,
    input  wire          cpu_reset_n,
    output wire          hdmi_out_clk_p,
    output wire          hdmi_out_clk_n,
    output wire          hdmi_out_data0_p,
    output wire          hdmi_out_data0_n,
    output wire          hdmi_out_data1_p,
    output wire          hdmi_out_data1_n,
    output wire          hdmi_out_data2_p,
    output wire          hdmi_out_data2_n,
    output wire          user_led_n0,
    output wire          user_led_n1,
    output wire          user_led_n2,
    output wire          user_led_n3,
    output wire          user_led_n4,
    output wire          user_led_n5,
    output wire          user_led_n6,
    output wire          user_led_n7
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg           rst = 1'd0;
(* dont_touch = "true" *)
wire          sys_clk;
wire          sys_rst;
wire          hdmi_clk;
wire          hdmi_rst;
wire          hdmi5x_clk;
wire          hdmi5x_rst;
wire          pll_reset;
reg           pll_power_down = 1'd0;
wire          pll_locked;
(* dont_touch = "true" *)
wire          s7pll0_clkin;
wire          s7pll0_clkout;
wire          s7pll0_clkout_buf;
wire          pll2_reset;
reg           pll2_power_down = 1'd0;
wire          pll2_locked;
wire          s7pll1_clkin;
wire          s7pll1_clkout0;
wire          s7pll1_clkout_buf0;
wire          s7pll1_clkout1;
wire          s7pll1_clkout_buf1;
reg           soc_rst = 1'd0;
wire          cpu_rst;
reg     [1:0] reset_storage = 2'd0;
reg           reset_re = 1'd0;
reg    [31:0] scratch_storage = 32'd305419896;
reg           scratch_re = 1'd0;
wire   [31:0] bus_errors_status;
wire          bus_errors_we;
reg           bus_errors_re = 1'd0;
reg           bus_error = 1'd0;
reg    [31:0] bus_errors = 32'd0;
reg           uart_rxtx_re = 1'd0;
wire    [7:0] uart_rxtx_r;
reg           uart_rxtx_we = 1'd0;
wire    [7:0] uart_rxtx_w;
wire          uart_txfull_status;
wire          uart_txfull_we;
reg           uart_txfull_re = 1'd0;
wire          uart_rxempty_status;
wire          uart_rxempty_we;
reg           uart_rxempty_re = 1'd0;
wire          uart_irq;
wire          uart_tx_status;
reg           uart_tx_pending = 1'd0;
wire          uart_tx_trigger;
reg           uart_tx_clear = 1'd0;
reg           uart_tx_trigger_d = 1'd0;
wire          uart_rx_status;
reg           uart_rx_pending = 1'd0;
wire          uart_rx_trigger;
reg           uart_rx_clear = 1'd0;
reg           uart_rx_trigger_d = 1'd0;
wire          uart_tx0;
wire          uart_rx0;
reg     [1:0] uart_status_status = 2'd0;
wire          uart_status_we;
reg           uart_status_re = 1'd0;
wire          uart_tx1;
wire          uart_rx1;
reg     [1:0] uart_pending_status = 2'd0;
wire          uart_pending_we;
reg           uart_pending_re = 1'd0;
reg     [1:0] uart_pending_r = 2'd0;
wire          uart_tx2;
wire          uart_rx2;
reg     [1:0] uart_enable_storage = 2'd0;
reg           uart_enable_re = 1'd0;
wire          uart_txempty_status;
wire          uart_txempty_we;
reg           uart_txempty_re = 1'd0;
wire          uart_rxfull_status;
wire          uart_rxfull_we;
reg           uart_rxfull_re = 1'd0;
reg           uart_uart_sink_valid = 1'd0;
reg           uart_uart_sink_ready = 1'd0;
reg           uart_uart_sink_first = 1'd0;
reg           uart_uart_sink_last = 1'd0;
reg     [7:0] uart_uart_sink_payload_data = 8'd0;
wire          uart_uart_source_valid;
reg           uart_uart_source_ready = 1'd0;
wire          uart_uart_source_first;
wire          uart_uart_source_last;
wire    [7:0] uart_uart_source_payload_data;
wire          uart_tx_fifo_sink_valid;
wire          uart_tx_fifo_sink_ready;
reg           uart_tx_fifo_sink_first = 1'd0;
reg           uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] uart_tx_fifo_sink_payload_data;
wire          uart_tx_fifo_source_valid;
wire          uart_tx_fifo_source_ready;
wire          uart_tx_fifo_source_first;
wire          uart_tx_fifo_source_last;
wire    [7:0] uart_tx_fifo_source_payload_data;
wire          uart_rx_fifo_sink_valid;
wire          uart_rx_fifo_sink_ready;
wire          uart_rx_fifo_sink_first;
wire          uart_rx_fifo_sink_last;
wire    [7:0] uart_rx_fifo_sink_payload_data;
wire          uart_rx_fifo_source_valid;
wire          uart_rx_fifo_source_ready;
wire          uart_rx_fifo_source_first;
wire          uart_rx_fifo_source_last;
wire    [7:0] uart_rx_fifo_source_payload_data;
reg    [31:0] timer_load_storage = 32'd0;
reg           timer_load_re = 1'd0;
reg    [31:0] timer_reload_storage = 32'd0;
reg           timer_reload_re = 1'd0;
reg           timer_en_storage = 1'd0;
reg           timer_en_re = 1'd0;
reg           timer_update_value_storage = 1'd0;
reg           timer_update_value_re = 1'd0;
reg    [31:0] timer_value_status = 32'd0;
wire          timer_value_we;
reg           timer_value_re = 1'd0;
wire          timer_irq;
wire          timer_zero_status;
reg           timer_zero_pending = 1'd0;
wire          timer_zero_trigger;
reg           timer_zero_clear = 1'd0;
reg           timer_zero_trigger_d = 1'd0;
wire          timer_zero0;
wire          timer_status_status;
wire          timer_status_we;
reg           timer_status_re = 1'd0;
wire          timer_zero1;
wire          timer_pending_status;
wire          timer_pending_we;
reg           timer_pending_re = 1'd0;
reg           timer_pending_r = 1'd0;
wire          timer_zero2;
reg           timer_enable_storage = 1'd0;
reg           timer_enable_re = 1'd0;
reg    [31:0] timer_value = 32'd0;
wire          sink_valid;
wire          sink_ready;
wire          sink_first;
wire          sink_last;
wire          sink_payload_hsync;
wire          sink_payload_vsync;
wire          sink_payload_de;
wire    [7:0] sink_payload_r;
wire    [7:0] sink_payload_g;
wire    [7:0] sink_payload_b;
wire          pads_clk;
wire    [7:0] tmdsencoder0_d0;
wire    [1:0] tmdsencoder0_c;
wire          tmdsencoder0_de;
reg     [9:0] tmdsencoder0_out = 10'd0;
reg     [7:0] tmdsencoder0_d1 = 8'd0;
reg     [3:0] tmdsencoder0_n1d = 4'd0;
reg     [8:0] tmdsencoder0_q_m = 9'd0;
wire          tmdsencoder0_q_m8_n;
reg     [8:0] tmdsencoder0_q_m_r = 9'd0;
reg     [3:0] tmdsencoder0_n0q_m = 4'd0;
reg     [3:0] tmdsencoder0_n1q_m = 4'd0;
reg  signed   [5:0] tmdsencoder0_cnt = 6'd0;
reg     [1:0] tmdsencoder0_new_c0 = 2'd0;
reg           tmdsencoder0_new_de0 = 1'd0;
reg     [1:0] tmdsencoder0_new_c1 = 2'd0;
reg           tmdsencoder0_new_de1 = 1'd0;
reg     [1:0] tmdsencoder0_new_c2 = 2'd0;
reg           tmdsencoder0_new_de2 = 1'd0;
wire          pad_o0;
wire          videohdmi10to1serializer0_sink_sink_valid;
wire          videohdmi10to1serializer0_sink_sink_ready;
reg           videohdmi10to1serializer0_sink_sink_first = 1'd0;
reg           videohdmi10to1serializer0_sink_sink_last = 1'd0;
wire    [9:0] videohdmi10to1serializer0_sink_sink_payload_data;
wire          videohdmi10to1serializer0_source_source_valid;
wire          videohdmi10to1serializer0_source_source_ready;
wire          videohdmi10to1serializer0_source_source_first;
wire          videohdmi10to1serializer0_source_source_last;
wire    [9:0] videohdmi10to1serializer0_source_source_payload_data;
wire          videohdmi10to1serializer0_cdc_sink_valid;
wire          videohdmi10to1serializer0_cdc_sink_ready;
wire          videohdmi10to1serializer0_cdc_sink_first;
wire          videohdmi10to1serializer0_cdc_sink_last;
wire    [9:0] videohdmi10to1serializer0_cdc_sink_payload_data;
wire          videohdmi10to1serializer0_cdc_source_valid;
wire          videohdmi10to1serializer0_cdc_source_ready;
wire          videohdmi10to1serializer0_cdc_source_first;
wire          videohdmi10to1serializer0_cdc_source_last;
wire    [9:0] videohdmi10to1serializer0_cdc_source_payload_data;
wire          videohdmi10to1serializer0_cdc_asyncfifo0_we;
wire          videohdmi10to1serializer0_cdc_asyncfifo0_writable;
wire          videohdmi10to1serializer0_cdc_asyncfifo0_re;
wire          videohdmi10to1serializer0_cdc_asyncfifo0_readable;
wire   [11:0] videohdmi10to1serializer0_cdc_asyncfifo0_din;
wire   [11:0] videohdmi10to1serializer0_cdc_asyncfifo0_dout;
wire          videohdmi10to1serializer0_cdc_graycounter0_ce;
(* dont_touch = "true" *)
reg     [2:0] videohdmi10to1serializer0_cdc_graycounter0_q = 3'd0;
wire    [2:0] videohdmi10to1serializer0_cdc_graycounter0_q_next;
reg     [2:0] videohdmi10to1serializer0_cdc_graycounter0_q_binary = 3'd0;
reg     [2:0] videohdmi10to1serializer0_cdc_graycounter0_q_next_binary = 3'd0;
wire          videohdmi10to1serializer0_cdc_graycounter1_ce;
(* dont_touch = "true" *)
reg     [2:0] videohdmi10to1serializer0_cdc_graycounter1_q = 3'd0;
wire    [2:0] videohdmi10to1serializer0_cdc_graycounter1_q_next;
reg     [2:0] videohdmi10to1serializer0_cdc_graycounter1_q_binary = 3'd0;
reg     [2:0] videohdmi10to1serializer0_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer0_cdc_produce_rdomain;
wire    [2:0] videohdmi10to1serializer0_cdc_consume_wdomain;
wire    [1:0] videohdmi10to1serializer0_cdc_wrport_adr;
wire   [11:0] videohdmi10to1serializer0_cdc_wrport_dat_r;
wire          videohdmi10to1serializer0_cdc_wrport_we;
wire   [11:0] videohdmi10to1serializer0_cdc_wrport_dat_w;
wire    [1:0] videohdmi10to1serializer0_cdc_rdport_adr;
wire   [11:0] videohdmi10to1serializer0_cdc_rdport_dat_r;
wire    [9:0] videohdmi10to1serializer0_cdc_fifo_in_payload_data;
wire          videohdmi10to1serializer0_cdc_fifo_in_first;
wire          videohdmi10to1serializer0_cdc_fifo_in_last;
wire    [9:0] videohdmi10to1serializer0_cdc_fifo_out_payload_data;
wire          videohdmi10to1serializer0_cdc_fifo_out_first;
wire          videohdmi10to1serializer0_cdc_fifo_out_last;
wire          videohdmi10to1serializer0_sink_valid;
wire          videohdmi10to1serializer0_sink_ready;
wire          videohdmi10to1serializer0_sink_first;
wire          videohdmi10to1serializer0_sink_last;
wire    [9:0] videohdmi10to1serializer0_sink_payload_data;
wire          videohdmi10to1serializer0_source_valid;
wire          videohdmi10to1serializer0_source_ready;
wire    [1:0] videohdmi10to1serializer0_source_payload_data;
reg     [4:0] videohdmi10to1serializer0_level = 5'd0;
wire          videohdmi10to1serializer0_i_inc;
reg           videohdmi10to1serializer0_i_count = 1'd0;
wire          videohdmi10to1serializer0_o_inc;
reg     [3:0] videohdmi10to1serializer0_o_count = 4'd0;
reg    [19:0] videohdmi10to1serializer0_shift_register = 20'd0;
wire    [9:0] videohdmi10to1serializer0_i_data;
reg     [1:0] videohdmi10to1serializer0_o_data = 2'd0;
wire    [7:0] tmdsencoder1_d0;
wire    [1:0] tmdsencoder1_c;
wire          tmdsencoder1_de;
reg     [9:0] tmdsencoder1_out = 10'd0;
reg     [7:0] tmdsencoder1_d1 = 8'd0;
reg     [3:0] tmdsencoder1_n1d = 4'd0;
reg     [8:0] tmdsencoder1_q_m = 9'd0;
wire          tmdsencoder1_q_m8_n;
reg     [8:0] tmdsencoder1_q_m_r = 9'd0;
reg     [3:0] tmdsencoder1_n0q_m = 4'd0;
reg     [3:0] tmdsencoder1_n1q_m = 4'd0;
reg  signed   [5:0] tmdsencoder1_cnt = 6'd0;
reg     [1:0] tmdsencoder1_new_c0 = 2'd0;
reg           tmdsencoder1_new_de0 = 1'd0;
reg     [1:0] tmdsencoder1_new_c1 = 2'd0;
reg           tmdsencoder1_new_de1 = 1'd0;
reg     [1:0] tmdsencoder1_new_c2 = 2'd0;
reg           tmdsencoder1_new_de2 = 1'd0;
wire          pad_o1;
wire          videohdmi10to1serializer1_sink_sink_valid;
wire          videohdmi10to1serializer1_sink_sink_ready;
reg           videohdmi10to1serializer1_sink_sink_first = 1'd0;
reg           videohdmi10to1serializer1_sink_sink_last = 1'd0;
wire    [9:0] videohdmi10to1serializer1_sink_sink_payload_data;
wire          videohdmi10to1serializer1_source_source_valid;
wire          videohdmi10to1serializer1_source_source_ready;
wire          videohdmi10to1serializer1_source_source_first;
wire          videohdmi10to1serializer1_source_source_last;
wire    [9:0] videohdmi10to1serializer1_source_source_payload_data;
wire          videohdmi10to1serializer1_cdc_sink_valid;
wire          videohdmi10to1serializer1_cdc_sink_ready;
wire          videohdmi10to1serializer1_cdc_sink_first;
wire          videohdmi10to1serializer1_cdc_sink_last;
wire    [9:0] videohdmi10to1serializer1_cdc_sink_payload_data;
wire          videohdmi10to1serializer1_cdc_source_valid;
wire          videohdmi10to1serializer1_cdc_source_ready;
wire          videohdmi10to1serializer1_cdc_source_first;
wire          videohdmi10to1serializer1_cdc_source_last;
wire    [9:0] videohdmi10to1serializer1_cdc_source_payload_data;
wire          videohdmi10to1serializer1_cdc_asyncfifo1_we;
wire          videohdmi10to1serializer1_cdc_asyncfifo1_writable;
wire          videohdmi10to1serializer1_cdc_asyncfifo1_re;
wire          videohdmi10to1serializer1_cdc_asyncfifo1_readable;
wire   [11:0] videohdmi10to1serializer1_cdc_asyncfifo1_din;
wire   [11:0] videohdmi10to1serializer1_cdc_asyncfifo1_dout;
wire          videohdmi10to1serializer1_cdc_graycounter2_ce;
(* dont_touch = "true" *)
reg     [2:0] videohdmi10to1serializer1_cdc_graycounter2_q = 3'd0;
wire    [2:0] videohdmi10to1serializer1_cdc_graycounter2_q_next;
reg     [2:0] videohdmi10to1serializer1_cdc_graycounter2_q_binary = 3'd0;
reg     [2:0] videohdmi10to1serializer1_cdc_graycounter2_q_next_binary = 3'd0;
wire          videohdmi10to1serializer1_cdc_graycounter3_ce;
(* dont_touch = "true" *)
reg     [2:0] videohdmi10to1serializer1_cdc_graycounter3_q = 3'd0;
wire    [2:0] videohdmi10to1serializer1_cdc_graycounter3_q_next;
reg     [2:0] videohdmi10to1serializer1_cdc_graycounter3_q_binary = 3'd0;
reg     [2:0] videohdmi10to1serializer1_cdc_graycounter3_q_next_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer1_cdc_produce_rdomain;
wire    [2:0] videohdmi10to1serializer1_cdc_consume_wdomain;
wire    [1:0] videohdmi10to1serializer1_cdc_wrport_adr;
wire   [11:0] videohdmi10to1serializer1_cdc_wrport_dat_r;
wire          videohdmi10to1serializer1_cdc_wrport_we;
wire   [11:0] videohdmi10to1serializer1_cdc_wrport_dat_w;
wire    [1:0] videohdmi10to1serializer1_cdc_rdport_adr;
wire   [11:0] videohdmi10to1serializer1_cdc_rdport_dat_r;
wire    [9:0] videohdmi10to1serializer1_cdc_fifo_in_payload_data;
wire          videohdmi10to1serializer1_cdc_fifo_in_first;
wire          videohdmi10to1serializer1_cdc_fifo_in_last;
wire    [9:0] videohdmi10to1serializer1_cdc_fifo_out_payload_data;
wire          videohdmi10to1serializer1_cdc_fifo_out_first;
wire          videohdmi10to1serializer1_cdc_fifo_out_last;
wire          videohdmi10to1serializer1_sink_valid;
wire          videohdmi10to1serializer1_sink_ready;
wire          videohdmi10to1serializer1_sink_first;
wire          videohdmi10to1serializer1_sink_last;
wire    [9:0] videohdmi10to1serializer1_sink_payload_data;
wire          videohdmi10to1serializer1_source_valid;
wire          videohdmi10to1serializer1_source_ready;
wire    [1:0] videohdmi10to1serializer1_source_payload_data;
reg     [4:0] videohdmi10to1serializer1_level = 5'd0;
wire          videohdmi10to1serializer1_i_inc;
reg           videohdmi10to1serializer1_i_count = 1'd0;
wire          videohdmi10to1serializer1_o_inc;
reg     [3:0] videohdmi10to1serializer1_o_count = 4'd0;
reg    [19:0] videohdmi10to1serializer1_shift_register = 20'd0;
wire    [9:0] videohdmi10to1serializer1_i_data;
reg     [1:0] videohdmi10to1serializer1_o_data = 2'd0;
wire    [7:0] tmdsencoder2_d0;
wire    [1:0] tmdsencoder2_c;
wire          tmdsencoder2_de;
reg     [9:0] tmdsencoder2_out = 10'd0;
reg     [7:0] tmdsencoder2_d1 = 8'd0;
reg     [3:0] tmdsencoder2_n1d = 4'd0;
reg     [8:0] tmdsencoder2_q_m = 9'd0;
wire          tmdsencoder2_q_m8_n;
reg     [8:0] tmdsencoder2_q_m_r = 9'd0;
reg     [3:0] tmdsencoder2_n0q_m = 4'd0;
reg     [3:0] tmdsencoder2_n1q_m = 4'd0;
reg  signed   [5:0] tmdsencoder2_cnt = 6'd0;
reg     [1:0] tmdsencoder2_new_c0 = 2'd0;
reg           tmdsencoder2_new_de0 = 1'd0;
reg     [1:0] tmdsencoder2_new_c1 = 2'd0;
reg           tmdsencoder2_new_de1 = 1'd0;
reg     [1:0] tmdsencoder2_new_c2 = 2'd0;
reg           tmdsencoder2_new_de2 = 1'd0;
wire          pad_o2;
wire          videohdmi10to1serializer2_sink_sink_valid;
wire          videohdmi10to1serializer2_sink_sink_ready;
reg           videohdmi10to1serializer2_sink_sink_first = 1'd0;
reg           videohdmi10to1serializer2_sink_sink_last = 1'd0;
wire    [9:0] videohdmi10to1serializer2_sink_sink_payload_data;
wire          videohdmi10to1serializer2_source_source_valid;
wire          videohdmi10to1serializer2_source_source_ready;
wire          videohdmi10to1serializer2_source_source_first;
wire          videohdmi10to1serializer2_source_source_last;
wire    [9:0] videohdmi10to1serializer2_source_source_payload_data;
wire          videohdmi10to1serializer2_cdc_sink_valid;
wire          videohdmi10to1serializer2_cdc_sink_ready;
wire          videohdmi10to1serializer2_cdc_sink_first;
wire          videohdmi10to1serializer2_cdc_sink_last;
wire    [9:0] videohdmi10to1serializer2_cdc_sink_payload_data;
wire          videohdmi10to1serializer2_cdc_source_valid;
wire          videohdmi10to1serializer2_cdc_source_ready;
wire          videohdmi10to1serializer2_cdc_source_first;
wire          videohdmi10to1serializer2_cdc_source_last;
wire    [9:0] videohdmi10to1serializer2_cdc_source_payload_data;
wire          videohdmi10to1serializer2_cdc_asyncfifo2_we;
wire          videohdmi10to1serializer2_cdc_asyncfifo2_writable;
wire          videohdmi10to1serializer2_cdc_asyncfifo2_re;
wire          videohdmi10to1serializer2_cdc_asyncfifo2_readable;
wire   [11:0] videohdmi10to1serializer2_cdc_asyncfifo2_din;
wire   [11:0] videohdmi10to1serializer2_cdc_asyncfifo2_dout;
wire          videohdmi10to1serializer2_cdc_graycounter4_ce;
(* dont_touch = "true" *)
reg     [2:0] videohdmi10to1serializer2_cdc_graycounter4_q = 3'd0;
wire    [2:0] videohdmi10to1serializer2_cdc_graycounter4_q_next;
reg     [2:0] videohdmi10to1serializer2_cdc_graycounter4_q_binary = 3'd0;
reg     [2:0] videohdmi10to1serializer2_cdc_graycounter4_q_next_binary = 3'd0;
wire          videohdmi10to1serializer2_cdc_graycounter5_ce;
(* dont_touch = "true" *)
reg     [2:0] videohdmi10to1serializer2_cdc_graycounter5_q = 3'd0;
wire    [2:0] videohdmi10to1serializer2_cdc_graycounter5_q_next;
reg     [2:0] videohdmi10to1serializer2_cdc_graycounter5_q_binary = 3'd0;
reg     [2:0] videohdmi10to1serializer2_cdc_graycounter5_q_next_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer2_cdc_produce_rdomain;
wire    [2:0] videohdmi10to1serializer2_cdc_consume_wdomain;
wire    [1:0] videohdmi10to1serializer2_cdc_wrport_adr;
wire   [11:0] videohdmi10to1serializer2_cdc_wrport_dat_r;
wire          videohdmi10to1serializer2_cdc_wrport_we;
wire   [11:0] videohdmi10to1serializer2_cdc_wrport_dat_w;
wire    [1:0] videohdmi10to1serializer2_cdc_rdport_adr;
wire   [11:0] videohdmi10to1serializer2_cdc_rdport_dat_r;
wire    [9:0] videohdmi10to1serializer2_cdc_fifo_in_payload_data;
wire          videohdmi10to1serializer2_cdc_fifo_in_first;
wire          videohdmi10to1serializer2_cdc_fifo_in_last;
wire    [9:0] videohdmi10to1serializer2_cdc_fifo_out_payload_data;
wire          videohdmi10to1serializer2_cdc_fifo_out_first;
wire          videohdmi10to1serializer2_cdc_fifo_out_last;
wire          videohdmi10to1serializer2_sink_valid;
wire          videohdmi10to1serializer2_sink_ready;
wire          videohdmi10to1serializer2_sink_first;
wire          videohdmi10to1serializer2_sink_last;
wire    [9:0] videohdmi10to1serializer2_sink_payload_data;
wire          videohdmi10to1serializer2_source_valid;
wire          videohdmi10to1serializer2_source_ready;
wire    [1:0] videohdmi10to1serializer2_source_payload_data;
reg     [4:0] videohdmi10to1serializer2_level = 5'd0;
wire          videohdmi10to1serializer2_i_inc;
reg           videohdmi10to1serializer2_i_count = 1'd0;
wire          videohdmi10to1serializer2_o_inc;
reg     [3:0] videohdmi10to1serializer2_o_count = 4'd0;
reg    [19:0] videohdmi10to1serializer2_shift_register = 20'd0;
wire    [9:0] videohdmi10to1serializer2_i_data;
reg     [1:0] videohdmi10to1serializer2_o_data = 2'd0;
reg           vtg_enable_storage = 1'd1;
reg           vtg_enable_re = 1'd0;
reg    [11:0] vtg_hres_storage = 12'd640;
reg           vtg_hres_re = 1'd0;
reg    [11:0] vtg_hsync_start_storage = 12'd656;
reg           vtg_hsync_start_re = 1'd0;
reg    [11:0] vtg_hsync_end_storage = 12'd752;
reg           vtg_hsync_end_re = 1'd0;
reg    [11:0] vtg_hscan_storage = 12'd799;
reg           vtg_hscan_re = 1'd0;
reg    [11:0] vtg_vres_storage = 12'd480;
reg           vtg_vres_re = 1'd0;
reg    [11:0] vtg_vsync_start_storage = 12'd490;
reg           vtg_vsync_start_re = 1'd0;
reg    [11:0] vtg_vsync_end_storage = 12'd492;
reg           vtg_vsync_end_re = 1'd0;
reg    [11:0] vtg_vscan_storage = 12'd524;
reg           vtg_vscan_re = 1'd0;
reg           vtg_source_valid = 1'd0;
wire          vtg_source_ready;
reg           vtg_source_first = 1'd0;
reg           vtg_source_last = 1'd0;
reg           vtg_source_payload_hsync = 1'd0;
reg           vtg_source_payload_vsync = 1'd0;
wire          vtg_source_payload_de;
reg    [11:0] vtg_source_payload_hres = 12'd0;
reg    [11:0] vtg_source_payload_vres = 12'd0;
reg    [11:0] vtg_source_payload_hcount = 12'd0;
reg    [11:0] vtg_source_payload_vcount = 12'd0;
wire          vtg_enable;
wire   [11:0] vtg_hres;
wire   [11:0] vtg_hsync_start;
wire   [11:0] vtg_hsync_end;
wire   [11:0] vtg_hscan;
wire   [11:0] vtg_vres;
wire   [11:0] vtg_vsync_start;
wire   [11:0] vtg_vsync_end;
wire   [11:0] vtg_vscan;
reg           vtg_hactive = 1'd0;
reg           vtg_vactive = 1'd0;
wire          vtg_reset;
reg           colorbarspattern_enable0 = 1'd1;
wire          colorbarspattern_vtg_sink_valid;
reg           colorbarspattern_vtg_sink_ready = 1'd0;
wire          colorbarspattern_vtg_sink_first;
wire          colorbarspattern_vtg_sink_last;
wire          colorbarspattern_vtg_sink_payload_hsync;
wire          colorbarspattern_vtg_sink_payload_vsync;
wire          colorbarspattern_vtg_sink_payload_de;
wire   [11:0] colorbarspattern_vtg_sink_payload_hres;
wire   [11:0] colorbarspattern_vtg_sink_payload_vres;
wire   [11:0] colorbarspattern_vtg_sink_payload_hcount;
wire   [11:0] colorbarspattern_vtg_sink_payload_vcount;
reg           colorbarspattern_source_valid = 1'd0;
wire          colorbarspattern_source_ready;
reg           colorbarspattern_source_first = 1'd0;
reg           colorbarspattern_source_last = 1'd0;
reg           colorbarspattern_source_payload_hsync = 1'd0;
reg           colorbarspattern_source_payload_vsync = 1'd0;
reg           colorbarspattern_source_payload_de = 1'd0;
reg     [7:0] colorbarspattern_source_payload_r = 8'd0;
reg     [7:0] colorbarspattern_source_payload_g = 8'd0;
reg     [7:0] colorbarspattern_source_payload_b = 8'd0;
wire          colorbarspattern_enable1;
reg    [11:0] colorbarspattern_pix = 12'd0;
reg     [2:0] colorbarspattern_bar = 3'd0;
wire          colorbarspattern_reset;
reg     [7:0] storage = 8'd0;
reg           re = 1'd0;
reg     [7:0] chaser = 8'd0;
reg           mode = 1'd0;
wire          wait_1;
wire          done;
reg    [22:0] count = 23'd6250000;
reg     [7:0] leds = 8'd0;
reg    [13:0] basesoc_adr = 14'd0;
reg           basesoc_we = 1'd0;
reg    [31:0] basesoc_dat_w = 32'd0;
wire   [31:0] basesoc_dat_r;
reg    [29:0] basesoc_wishbone_adr = 30'd0;
reg    [31:0] basesoc_wishbone_dat_w = 32'd0;
reg    [31:0] basesoc_wishbone_dat_r = 32'd0;
reg     [3:0] basesoc_wishbone_sel = 4'd0;
reg           basesoc_wishbone_cyc = 1'd0;
reg           basesoc_wishbone_stb = 1'd0;
reg           basesoc_wishbone_ack = 1'd0;
reg           basesoc_wishbone_we = 1'd0;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg           csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_r;
reg           csr_bankarray_csrbank0_reset0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_w;
reg           csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_r;
reg           csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_w;
reg           csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_r;
reg           csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_w;
wire          csr_bankarray_csrbank0_sel;
wire   [13:0] csr_bankarray_sram_bus_adr;
wire          csr_bankarray_sram_bus_we;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire    [5:0] csr_bankarray_adr;
wire    [7:0] csr_bankarray_dat_r;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
wire          csr_bankarray_interface1_bank_bus_we;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg           csr_bankarray_csrbank1_out0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank1_out0_r;
reg           csr_bankarray_csrbank1_out0_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank1_out0_w;
wire          csr_bankarray_csrbank1_sel;
wire   [13:0] csr_bankarray_interface2_bank_bus_adr;
wire          csr_bankarray_interface2_bank_bus_we;
wire   [31:0] csr_bankarray_interface2_bank_bus_dat_w;
reg    [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg           csr_bankarray_csrbank2_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_load0_r;
reg           csr_bankarray_csrbank2_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_load0_w;
reg           csr_bankarray_csrbank2_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_reload0_r;
reg           csr_bankarray_csrbank2_reload0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_reload0_w;
reg           csr_bankarray_csrbank2_en0_re = 1'd0;
wire          csr_bankarray_csrbank2_en0_r;
reg           csr_bankarray_csrbank2_en0_we = 1'd0;
wire          csr_bankarray_csrbank2_en0_w;
reg           csr_bankarray_csrbank2_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank2_update_value0_r;
reg           csr_bankarray_csrbank2_update_value0_we = 1'd0;
wire          csr_bankarray_csrbank2_update_value0_w;
reg           csr_bankarray_csrbank2_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_value_r;
reg           csr_bankarray_csrbank2_value_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_value_w;
reg           csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank2_ev_status_r;
reg           csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank2_ev_status_w;
reg           csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank2_ev_pending_r;
reg           csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank2_ev_pending_w;
reg           csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank2_ev_enable0_r;
reg           csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank2_ev_enable0_w;
wire          csr_bankarray_csrbank2_sel;
wire   [13:0] csr_bankarray_interface3_bank_bus_adr;
wire          csr_bankarray_interface3_bank_bus_we;
wire   [31:0] csr_bankarray_interface3_bank_bus_dat_w;
reg    [31:0] csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
reg           csr_bankarray_csrbank3_txfull_re = 1'd0;
wire          csr_bankarray_csrbank3_txfull_r;
reg           csr_bankarray_csrbank3_txfull_we = 1'd0;
wire          csr_bankarray_csrbank3_txfull_w;
reg           csr_bankarray_csrbank3_rxempty_re = 1'd0;
wire          csr_bankarray_csrbank3_rxempty_r;
reg           csr_bankarray_csrbank3_rxempty_we = 1'd0;
wire          csr_bankarray_csrbank3_rxempty_w;
reg           csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_status_r;
reg           csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_status_w;
reg           csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_pending_r;
reg           csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_pending_w;
reg           csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_enable0_r;
reg           csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_enable0_w;
reg           csr_bankarray_csrbank3_txempty_re = 1'd0;
wire          csr_bankarray_csrbank3_txempty_r;
reg           csr_bankarray_csrbank3_txempty_we = 1'd0;
wire          csr_bankarray_csrbank3_txempty_w;
reg           csr_bankarray_csrbank3_rxfull_re = 1'd0;
wire          csr_bankarray_csrbank3_rxfull_r;
reg           csr_bankarray_csrbank3_rxfull_we = 1'd0;
wire          csr_bankarray_csrbank3_rxfull_w;
wire          csr_bankarray_csrbank3_sel;
wire   [13:0] csr_bankarray_interface4_bank_bus_adr;
wire          csr_bankarray_interface4_bank_bus_we;
wire   [31:0] csr_bankarray_interface4_bank_bus_dat_w;
reg    [31:0] csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
reg           csr_bankarray_csrbank4_enable0_re = 1'd0;
wire          csr_bankarray_csrbank4_enable0_r;
reg           csr_bankarray_csrbank4_enable0_we = 1'd0;
wire          csr_bankarray_csrbank4_enable0_w;
reg           csr_bankarray_csrbank4_hres0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_hres0_r;
reg           csr_bankarray_csrbank4_hres0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_hres0_w;
reg           csr_bankarray_csrbank4_hsync_start0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_hsync_start0_r;
reg           csr_bankarray_csrbank4_hsync_start0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_hsync_start0_w;
reg           csr_bankarray_csrbank4_hsync_end0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_hsync_end0_r;
reg           csr_bankarray_csrbank4_hsync_end0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_hsync_end0_w;
reg           csr_bankarray_csrbank4_hscan0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_hscan0_r;
reg           csr_bankarray_csrbank4_hscan0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_hscan0_w;
reg           csr_bankarray_csrbank4_vres0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_vres0_r;
reg           csr_bankarray_csrbank4_vres0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_vres0_w;
reg           csr_bankarray_csrbank4_vsync_start0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_vsync_start0_r;
reg           csr_bankarray_csrbank4_vsync_start0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_vsync_start0_w;
reg           csr_bankarray_csrbank4_vsync_end0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_vsync_end0_r;
reg           csr_bankarray_csrbank4_vsync_end0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_vsync_end0_w;
reg           csr_bankarray_csrbank4_vscan0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_vscan0_r;
reg           csr_bankarray_csrbank4_vscan0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank4_vscan0_w;
wire          csr_bankarray_csrbank4_sel;
wire   [13:0] csr_interconnect_adr;
wire          csr_interconnect_we;
wire   [31:0] csr_interconnect_dat_w;
wire   [31:0] csr_interconnect_dat_r;
wire          basesoc_s7pll0_reset0;
wire          basesoc_s7pll0_reset1;
wire          basesoc_s7pll0_reset2;
wire          basesoc_s7pll0_reset3;
wire          basesoc_s7pll0_reset4;
wire          basesoc_s7pll0_reset5;
wire          basesoc_s7pll0_reset6;
wire          basesoc_s7pll0_reset7;
wire          basesoc_s7pll0_pll_fb;
wire          basesoc_s7pll1_reset0;
wire          basesoc_s7pll1_reset1;
wire          basesoc_s7pll1_reset2;
wire          basesoc_s7pll1_reset3;
wire          basesoc_s7pll1_reset4;
wire          basesoc_s7pll1_reset5;
wire          basesoc_s7pll1_reset6;
wire          basesoc_s7pll1_reset7;
wire          basesoc_s7pll1_pll_fb;
reg           basesoc_videotiminggenerator_state = 1'd0;
reg           basesoc_videotiminggenerator_next_state = 1'd0;
reg           vtg_hactive_clockdomainsrenamer0_next_value0 = 1'd0;
reg           vtg_hactive_clockdomainsrenamer0_next_value_ce0 = 1'd0;
reg           vtg_vactive_clockdomainsrenamer0_next_value1 = 1'd0;
reg           vtg_vactive_clockdomainsrenamer0_next_value_ce1 = 1'd0;
reg    [11:0] vtg_source_payload_hres_clockdomainsrenamer0_next_value2 = 12'd0;
reg           vtg_source_payload_hres_clockdomainsrenamer0_next_value_ce2 = 1'd0;
reg    [11:0] vtg_source_payload_vres_clockdomainsrenamer0_next_value3 = 12'd0;
reg           vtg_source_payload_vres_clockdomainsrenamer0_next_value_ce3 = 1'd0;
reg    [11:0] vtg_source_payload_hcount_clockdomainsrenamer0_next_value4 = 12'd0;
reg           vtg_source_payload_hcount_clockdomainsrenamer0_next_value_ce4 = 1'd0;
reg    [11:0] vtg_source_payload_vcount_clockdomainsrenamer0_next_value5 = 12'd0;
reg           vtg_source_payload_vcount_clockdomainsrenamer0_next_value_ce5 = 1'd0;
reg           vtg_source_payload_hsync_clockdomainsrenamer0_next_value6 = 1'd0;
reg           vtg_source_payload_hsync_clockdomainsrenamer0_next_value_ce6 = 1'd0;
reg           vtg_source_payload_vsync_clockdomainsrenamer0_next_value7 = 1'd0;
reg           vtg_source_payload_vsync_clockdomainsrenamer0_next_value_ce7 = 1'd0;
reg           basesoc_colorbarspattern_state = 1'd0;
reg           basesoc_colorbarspattern_next_state = 1'd0;
reg    [11:0] colorbarspattern_pix_clockdomainsrenamer1_next_value0 = 12'd0;
reg           colorbarspattern_pix_clockdomainsrenamer1_next_value_ce0 = 1'd0;
reg     [2:0] colorbarspattern_bar_clockdomainsrenamer1_next_value1 = 3'd0;
reg           colorbarspattern_bar_clockdomainsrenamer1_next_value_ce1 = 1'd0;
reg           basesoc_state = 1'd0;
reg           basesoc_next_state = 1'd0;
reg     [9:0] array_muxed0 = 10'd0;
reg     [9:0] array_muxed1 = 10'd0;
reg     [9:0] array_muxed2 = 10'd0;
wire          xilinxasyncresetsynchronizerimpl0;
wire          xilinxasyncresetsynchronizerimpl0_rst_meta;
wire          xilinxasyncresetsynchronizerimpl1;
wire          xilinxasyncresetsynchronizerimpl1_rst_meta;
wire          xilinxasyncresetsynchronizerimpl2;
wire          xilinxasyncresetsynchronizerimpl2_rst_meta;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl0_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl0_regs1 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl1_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl1_regs1 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl2_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl2_regs1 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl3_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl3_regs1 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl4_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl4_regs1 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl5_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl5_regs1 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl6_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl6_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl7_regs0 = 12'd0;
(* async_reg = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl7_regs1 = 12'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl8_regs0 = 12'd0;
(* async_reg = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl8_regs1 = 12'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl9_regs0 = 12'd0;
(* async_reg = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl9_regs1 = 12'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl10_regs0 = 12'd0;
(* async_reg = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl10_regs1 = 12'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl11_regs0 = 12'd0;
(* async_reg = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl11_regs1 = 12'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl12_regs0 = 12'd0;
(* async_reg = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl12_regs1 = 12'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl13_regs0 = 12'd0;
(* async_reg = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl13_regs1 = 12'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl14_regs0 = 12'd0;
(* async_reg = "true", dont_touch = "true" *)
reg    [11:0] xilinxmultiregimpl14_regs1 = 12'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl15_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl15_regs1 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign colorbarspattern_vtg_sink_valid = vtg_source_valid;
assign vtg_source_ready = colorbarspattern_vtg_sink_ready;
assign colorbarspattern_vtg_sink_first = vtg_source_first;
assign colorbarspattern_vtg_sink_last = vtg_source_last;
assign colorbarspattern_vtg_sink_payload_hsync = vtg_source_payload_hsync;
assign colorbarspattern_vtg_sink_payload_vsync = vtg_source_payload_vsync;
assign colorbarspattern_vtg_sink_payload_de = vtg_source_payload_de;
assign colorbarspattern_vtg_sink_payload_hres = vtg_source_payload_hres;
assign colorbarspattern_vtg_sink_payload_vres = vtg_source_payload_vres;
assign colorbarspattern_vtg_sink_payload_hcount = vtg_source_payload_hcount;
assign colorbarspattern_vtg_sink_payload_vcount = vtg_source_payload_vcount;
assign sink_valid = colorbarspattern_source_valid;
assign colorbarspattern_source_ready = sink_ready;
assign sink_first = colorbarspattern_source_first;
assign sink_last = colorbarspattern_source_last;
assign sink_payload_hsync = colorbarspattern_source_payload_hsync;
assign sink_payload_vsync = colorbarspattern_source_payload_vsync;
assign sink_payload_de = colorbarspattern_source_payload_de;
assign sink_payload_r = colorbarspattern_source_payload_r;
assign sink_payload_g = colorbarspattern_source_payload_g;
assign sink_payload_b = colorbarspattern_source_payload_b;
always @(*) begin
    rst <= 1'd0;
    if (soc_rst) begin
        rst <= 1'd1;
    end
end
assign pll_reset = ((~cpu_reset_n) | rst);
assign pll2_reset = ((~cpu_reset_n) | rst);
assign sys_clk = s7pll0_clkout_buf;
assign s7pll1_clkin = clk50;
assign hdmi_clk = s7pll1_clkout_buf0;
assign hdmi5x_clk = s7pll1_clkout_buf1;
assign bus_errors_status = bus_errors;
always @(*) begin
    soc_rst <= 1'd0;
    if (reset_re) begin
        soc_rst <= reset_storage[0];
    end
end
assign cpu_rst = reset_storage[1];
assign csr_bankarray_csrbank0_reset0_w = reset_storage[1:0];
assign csr_bankarray_csrbank0_scratch0_w = scratch_storage[31:0];
assign csr_bankarray_csrbank0_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = csr_bankarray_csrbank0_bus_errors_we;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
always @(*) begin
    uart_uart_sink_ready <= 1'd0;
    uart_uart_sink_ready <= 1'd1;
    uart_uart_sink_ready <= uart_rx_fifo_sink_ready;
end
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
    uart_tx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[0])) begin
        uart_tx_clear <= 1'd1;
    end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
    uart_rx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[1])) begin
        uart_rx_clear <= 1'd1;
    end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_source_valid = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_source_ready;
assign uart_tx_fifo_source_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_source_ready;
assign uart_rx_fifo_source_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_sink_payload_data;
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
    timer_zero_clear <= 1'd0;
    if ((timer_pending_re & timer_pending_r)) begin
        timer_zero_clear <= 1'd1;
    end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign sink_ready = 1'd1;
assign tmdsencoder0_d0 = sink_payload_b;
assign tmdsencoder0_c = {sink_payload_vsync, sink_payload_hsync};
assign tmdsencoder0_de = sink_payload_de;
assign tmdsencoder1_d0 = sink_payload_g;
assign tmdsencoder1_c = 1'd0;
assign tmdsencoder1_de = sink_payload_de;
assign tmdsencoder2_d0 = sink_payload_r;
assign tmdsencoder2_c = 1'd0;
assign tmdsencoder2_de = sink_payload_de;
assign tmdsencoder0_q_m8_n = ((tmdsencoder0_n1d > 3'd4) | ((tmdsencoder0_n1d == 3'd4) & (~tmdsencoder0_d1[0])));
assign videohdmi10to1serializer0_sink_sink_valid = 1'd1;
assign videohdmi10to1serializer0_sink_sink_payload_data = tmdsencoder0_out;
assign videohdmi10to1serializer0_sink_valid = videohdmi10to1serializer0_source_source_valid;
assign videohdmi10to1serializer0_source_source_ready = videohdmi10to1serializer0_sink_ready;
assign videohdmi10to1serializer0_sink_first = videohdmi10to1serializer0_source_source_first;
assign videohdmi10to1serializer0_sink_last = videohdmi10to1serializer0_source_source_last;
assign videohdmi10to1serializer0_sink_payload_data = videohdmi10to1serializer0_source_source_payload_data;
assign videohdmi10to1serializer0_source_ready = 1'd1;
assign videohdmi10to1serializer0_cdc_sink_valid = videohdmi10to1serializer0_sink_sink_valid;
assign videohdmi10to1serializer0_sink_sink_ready = videohdmi10to1serializer0_cdc_sink_ready;
assign videohdmi10to1serializer0_cdc_sink_first = videohdmi10to1serializer0_sink_sink_first;
assign videohdmi10to1serializer0_cdc_sink_last = videohdmi10to1serializer0_sink_sink_last;
assign videohdmi10to1serializer0_cdc_sink_payload_data = videohdmi10to1serializer0_sink_sink_payload_data;
assign videohdmi10to1serializer0_source_source_valid = videohdmi10to1serializer0_cdc_source_valid;
assign videohdmi10to1serializer0_cdc_source_ready = videohdmi10to1serializer0_source_source_ready;
assign videohdmi10to1serializer0_source_source_first = videohdmi10to1serializer0_cdc_source_first;
assign videohdmi10to1serializer0_source_source_last = videohdmi10to1serializer0_cdc_source_last;
assign videohdmi10to1serializer0_source_source_payload_data = videohdmi10to1serializer0_cdc_source_payload_data;
assign videohdmi10to1serializer0_cdc_asyncfifo0_din = {videohdmi10to1serializer0_cdc_fifo_in_last, videohdmi10to1serializer0_cdc_fifo_in_first, videohdmi10to1serializer0_cdc_fifo_in_payload_data};
assign {videohdmi10to1serializer0_cdc_fifo_out_last, videohdmi10to1serializer0_cdc_fifo_out_first, videohdmi10to1serializer0_cdc_fifo_out_payload_data} = videohdmi10to1serializer0_cdc_asyncfifo0_dout;
assign videohdmi10to1serializer0_cdc_sink_ready = videohdmi10to1serializer0_cdc_asyncfifo0_writable;
assign videohdmi10to1serializer0_cdc_asyncfifo0_we = videohdmi10to1serializer0_cdc_sink_valid;
assign videohdmi10to1serializer0_cdc_fifo_in_first = videohdmi10to1serializer0_cdc_sink_first;
assign videohdmi10to1serializer0_cdc_fifo_in_last = videohdmi10to1serializer0_cdc_sink_last;
assign videohdmi10to1serializer0_cdc_fifo_in_payload_data = videohdmi10to1serializer0_cdc_sink_payload_data;
assign videohdmi10to1serializer0_cdc_source_valid = videohdmi10to1serializer0_cdc_asyncfifo0_readable;
assign videohdmi10to1serializer0_cdc_source_first = videohdmi10to1serializer0_cdc_fifo_out_first;
assign videohdmi10to1serializer0_cdc_source_last = videohdmi10to1serializer0_cdc_fifo_out_last;
assign videohdmi10to1serializer0_cdc_source_payload_data = videohdmi10to1serializer0_cdc_fifo_out_payload_data;
assign videohdmi10to1serializer0_cdc_asyncfifo0_re = videohdmi10to1serializer0_cdc_source_ready;
assign videohdmi10to1serializer0_cdc_graycounter0_ce = (videohdmi10to1serializer0_cdc_asyncfifo0_writable & videohdmi10to1serializer0_cdc_asyncfifo0_we);
assign videohdmi10to1serializer0_cdc_graycounter1_ce = (videohdmi10to1serializer0_cdc_asyncfifo0_readable & videohdmi10to1serializer0_cdc_asyncfifo0_re);
assign videohdmi10to1serializer0_cdc_asyncfifo0_writable = (((videohdmi10to1serializer0_cdc_graycounter0_q[2] == videohdmi10to1serializer0_cdc_consume_wdomain[2]) | (videohdmi10to1serializer0_cdc_graycounter0_q[1] == videohdmi10to1serializer0_cdc_consume_wdomain[1])) | (videohdmi10to1serializer0_cdc_graycounter0_q[0] != videohdmi10to1serializer0_cdc_consume_wdomain[0]));
assign videohdmi10to1serializer0_cdc_asyncfifo0_readable = (videohdmi10to1serializer0_cdc_graycounter1_q != videohdmi10to1serializer0_cdc_produce_rdomain);
assign videohdmi10to1serializer0_cdc_wrport_adr = videohdmi10to1serializer0_cdc_graycounter0_q_binary[1:0];
assign videohdmi10to1serializer0_cdc_wrport_dat_w = videohdmi10to1serializer0_cdc_asyncfifo0_din;
assign videohdmi10to1serializer0_cdc_wrport_we = videohdmi10to1serializer0_cdc_graycounter0_ce;
assign videohdmi10to1serializer0_cdc_rdport_adr = videohdmi10to1serializer0_cdc_graycounter1_q_next_binary[1:0];
assign videohdmi10to1serializer0_cdc_asyncfifo0_dout = videohdmi10to1serializer0_cdc_rdport_dat_r;
always @(*) begin
    videohdmi10to1serializer0_cdc_graycounter0_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer0_cdc_graycounter0_ce) begin
        videohdmi10to1serializer0_cdc_graycounter0_q_next_binary <= (videohdmi10to1serializer0_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer0_cdc_graycounter0_q_next_binary <= videohdmi10to1serializer0_cdc_graycounter0_q_binary;
    end
end
assign videohdmi10to1serializer0_cdc_graycounter0_q_next = (videohdmi10to1serializer0_cdc_graycounter0_q_next_binary ^ videohdmi10to1serializer0_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    videohdmi10to1serializer0_cdc_graycounter1_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer0_cdc_graycounter1_ce) begin
        videohdmi10to1serializer0_cdc_graycounter1_q_next_binary <= (videohdmi10to1serializer0_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer0_cdc_graycounter1_q_next_binary <= videohdmi10to1serializer0_cdc_graycounter1_q_binary;
    end
end
assign videohdmi10to1serializer0_cdc_graycounter1_q_next = (videohdmi10to1serializer0_cdc_graycounter1_q_next_binary ^ videohdmi10to1serializer0_cdc_graycounter1_q_next_binary[2:1]);
assign videohdmi10to1serializer0_sink_ready = (videohdmi10to1serializer0_level < 4'd10);
assign videohdmi10to1serializer0_source_valid = (videohdmi10to1serializer0_level >= 2'd2);
assign videohdmi10to1serializer0_i_inc = (videohdmi10to1serializer0_sink_valid & videohdmi10to1serializer0_sink_ready);
assign videohdmi10to1serializer0_o_inc = (videohdmi10to1serializer0_source_valid & videohdmi10to1serializer0_source_ready);
assign videohdmi10to1serializer0_i_data = {videohdmi10to1serializer0_sink_payload_data[0], videohdmi10to1serializer0_sink_payload_data[1], videohdmi10to1serializer0_sink_payload_data[2], videohdmi10to1serializer0_sink_payload_data[3], videohdmi10to1serializer0_sink_payload_data[4], videohdmi10to1serializer0_sink_payload_data[5], videohdmi10to1serializer0_sink_payload_data[6], videohdmi10to1serializer0_sink_payload_data[7], videohdmi10to1serializer0_sink_payload_data[8], videohdmi10to1serializer0_sink_payload_data[9]};
always @(*) begin
    videohdmi10to1serializer0_o_data <= 2'd0;
    case (videohdmi10to1serializer0_o_count)
        1'd0: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[19:18];
        end
        1'd1: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[17:16];
        end
        2'd2: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[15:14];
        end
        2'd3: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[13:12];
        end
        3'd4: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[11:10];
        end
        3'd5: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[9:8];
        end
        3'd6: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[7:6];
        end
        3'd7: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[5:4];
        end
        4'd8: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[3:2];
        end
        4'd9: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[1:0];
        end
    endcase
end
assign videohdmi10to1serializer0_source_payload_data = {videohdmi10to1serializer0_o_data[0], videohdmi10to1serializer0_o_data[1]};
assign tmdsencoder1_q_m8_n = ((tmdsencoder1_n1d > 3'd4) | ((tmdsencoder1_n1d == 3'd4) & (~tmdsencoder1_d1[0])));
assign videohdmi10to1serializer1_sink_sink_valid = 1'd1;
assign videohdmi10to1serializer1_sink_sink_payload_data = tmdsencoder1_out;
assign videohdmi10to1serializer1_sink_valid = videohdmi10to1serializer1_source_source_valid;
assign videohdmi10to1serializer1_source_source_ready = videohdmi10to1serializer1_sink_ready;
assign videohdmi10to1serializer1_sink_first = videohdmi10to1serializer1_source_source_first;
assign videohdmi10to1serializer1_sink_last = videohdmi10to1serializer1_source_source_last;
assign videohdmi10to1serializer1_sink_payload_data = videohdmi10to1serializer1_source_source_payload_data;
assign videohdmi10to1serializer1_source_ready = 1'd1;
assign videohdmi10to1serializer1_cdc_sink_valid = videohdmi10to1serializer1_sink_sink_valid;
assign videohdmi10to1serializer1_sink_sink_ready = videohdmi10to1serializer1_cdc_sink_ready;
assign videohdmi10to1serializer1_cdc_sink_first = videohdmi10to1serializer1_sink_sink_first;
assign videohdmi10to1serializer1_cdc_sink_last = videohdmi10to1serializer1_sink_sink_last;
assign videohdmi10to1serializer1_cdc_sink_payload_data = videohdmi10to1serializer1_sink_sink_payload_data;
assign videohdmi10to1serializer1_source_source_valid = videohdmi10to1serializer1_cdc_source_valid;
assign videohdmi10to1serializer1_cdc_source_ready = videohdmi10to1serializer1_source_source_ready;
assign videohdmi10to1serializer1_source_source_first = videohdmi10to1serializer1_cdc_source_first;
assign videohdmi10to1serializer1_source_source_last = videohdmi10to1serializer1_cdc_source_last;
assign videohdmi10to1serializer1_source_source_payload_data = videohdmi10to1serializer1_cdc_source_payload_data;
assign videohdmi10to1serializer1_cdc_asyncfifo1_din = {videohdmi10to1serializer1_cdc_fifo_in_last, videohdmi10to1serializer1_cdc_fifo_in_first, videohdmi10to1serializer1_cdc_fifo_in_payload_data};
assign {videohdmi10to1serializer1_cdc_fifo_out_last, videohdmi10to1serializer1_cdc_fifo_out_first, videohdmi10to1serializer1_cdc_fifo_out_payload_data} = videohdmi10to1serializer1_cdc_asyncfifo1_dout;
assign videohdmi10to1serializer1_cdc_sink_ready = videohdmi10to1serializer1_cdc_asyncfifo1_writable;
assign videohdmi10to1serializer1_cdc_asyncfifo1_we = videohdmi10to1serializer1_cdc_sink_valid;
assign videohdmi10to1serializer1_cdc_fifo_in_first = videohdmi10to1serializer1_cdc_sink_first;
assign videohdmi10to1serializer1_cdc_fifo_in_last = videohdmi10to1serializer1_cdc_sink_last;
assign videohdmi10to1serializer1_cdc_fifo_in_payload_data = videohdmi10to1serializer1_cdc_sink_payload_data;
assign videohdmi10to1serializer1_cdc_source_valid = videohdmi10to1serializer1_cdc_asyncfifo1_readable;
assign videohdmi10to1serializer1_cdc_source_first = videohdmi10to1serializer1_cdc_fifo_out_first;
assign videohdmi10to1serializer1_cdc_source_last = videohdmi10to1serializer1_cdc_fifo_out_last;
assign videohdmi10to1serializer1_cdc_source_payload_data = videohdmi10to1serializer1_cdc_fifo_out_payload_data;
assign videohdmi10to1serializer1_cdc_asyncfifo1_re = videohdmi10to1serializer1_cdc_source_ready;
assign videohdmi10to1serializer1_cdc_graycounter2_ce = (videohdmi10to1serializer1_cdc_asyncfifo1_writable & videohdmi10to1serializer1_cdc_asyncfifo1_we);
assign videohdmi10to1serializer1_cdc_graycounter3_ce = (videohdmi10to1serializer1_cdc_asyncfifo1_readable & videohdmi10to1serializer1_cdc_asyncfifo1_re);
assign videohdmi10to1serializer1_cdc_asyncfifo1_writable = (((videohdmi10to1serializer1_cdc_graycounter2_q[2] == videohdmi10to1serializer1_cdc_consume_wdomain[2]) | (videohdmi10to1serializer1_cdc_graycounter2_q[1] == videohdmi10to1serializer1_cdc_consume_wdomain[1])) | (videohdmi10to1serializer1_cdc_graycounter2_q[0] != videohdmi10to1serializer1_cdc_consume_wdomain[0]));
assign videohdmi10to1serializer1_cdc_asyncfifo1_readable = (videohdmi10to1serializer1_cdc_graycounter3_q != videohdmi10to1serializer1_cdc_produce_rdomain);
assign videohdmi10to1serializer1_cdc_wrport_adr = videohdmi10to1serializer1_cdc_graycounter2_q_binary[1:0];
assign videohdmi10to1serializer1_cdc_wrport_dat_w = videohdmi10to1serializer1_cdc_asyncfifo1_din;
assign videohdmi10to1serializer1_cdc_wrport_we = videohdmi10to1serializer1_cdc_graycounter2_ce;
assign videohdmi10to1serializer1_cdc_rdport_adr = videohdmi10to1serializer1_cdc_graycounter3_q_next_binary[1:0];
assign videohdmi10to1serializer1_cdc_asyncfifo1_dout = videohdmi10to1serializer1_cdc_rdport_dat_r;
always @(*) begin
    videohdmi10to1serializer1_cdc_graycounter2_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer1_cdc_graycounter2_ce) begin
        videohdmi10to1serializer1_cdc_graycounter2_q_next_binary <= (videohdmi10to1serializer1_cdc_graycounter2_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer1_cdc_graycounter2_q_next_binary <= videohdmi10to1serializer1_cdc_graycounter2_q_binary;
    end
end
assign videohdmi10to1serializer1_cdc_graycounter2_q_next = (videohdmi10to1serializer1_cdc_graycounter2_q_next_binary ^ videohdmi10to1serializer1_cdc_graycounter2_q_next_binary[2:1]);
always @(*) begin
    videohdmi10to1serializer1_cdc_graycounter3_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer1_cdc_graycounter3_ce) begin
        videohdmi10to1serializer1_cdc_graycounter3_q_next_binary <= (videohdmi10to1serializer1_cdc_graycounter3_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer1_cdc_graycounter3_q_next_binary <= videohdmi10to1serializer1_cdc_graycounter3_q_binary;
    end
end
assign videohdmi10to1serializer1_cdc_graycounter3_q_next = (videohdmi10to1serializer1_cdc_graycounter3_q_next_binary ^ videohdmi10to1serializer1_cdc_graycounter3_q_next_binary[2:1]);
assign videohdmi10to1serializer1_sink_ready = (videohdmi10to1serializer1_level < 4'd10);
assign videohdmi10to1serializer1_source_valid = (videohdmi10to1serializer1_level >= 2'd2);
assign videohdmi10to1serializer1_i_inc = (videohdmi10to1serializer1_sink_valid & videohdmi10to1serializer1_sink_ready);
assign videohdmi10to1serializer1_o_inc = (videohdmi10to1serializer1_source_valid & videohdmi10to1serializer1_source_ready);
assign videohdmi10to1serializer1_i_data = {videohdmi10to1serializer1_sink_payload_data[0], videohdmi10to1serializer1_sink_payload_data[1], videohdmi10to1serializer1_sink_payload_data[2], videohdmi10to1serializer1_sink_payload_data[3], videohdmi10to1serializer1_sink_payload_data[4], videohdmi10to1serializer1_sink_payload_data[5], videohdmi10to1serializer1_sink_payload_data[6], videohdmi10to1serializer1_sink_payload_data[7], videohdmi10to1serializer1_sink_payload_data[8], videohdmi10to1serializer1_sink_payload_data[9]};
always @(*) begin
    videohdmi10to1serializer1_o_data <= 2'd0;
    case (videohdmi10to1serializer1_o_count)
        1'd0: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[19:18];
        end
        1'd1: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[17:16];
        end
        2'd2: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[15:14];
        end
        2'd3: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[13:12];
        end
        3'd4: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[11:10];
        end
        3'd5: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[9:8];
        end
        3'd6: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[7:6];
        end
        3'd7: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[5:4];
        end
        4'd8: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[3:2];
        end
        4'd9: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[1:0];
        end
    endcase
end
assign videohdmi10to1serializer1_source_payload_data = {videohdmi10to1serializer1_o_data[0], videohdmi10to1serializer1_o_data[1]};
assign tmdsencoder2_q_m8_n = ((tmdsencoder2_n1d > 3'd4) | ((tmdsencoder2_n1d == 3'd4) & (~tmdsencoder2_d1[0])));
assign videohdmi10to1serializer2_sink_sink_valid = 1'd1;
assign videohdmi10to1serializer2_sink_sink_payload_data = tmdsencoder2_out;
assign videohdmi10to1serializer2_sink_valid = videohdmi10to1serializer2_source_source_valid;
assign videohdmi10to1serializer2_source_source_ready = videohdmi10to1serializer2_sink_ready;
assign videohdmi10to1serializer2_sink_first = videohdmi10to1serializer2_source_source_first;
assign videohdmi10to1serializer2_sink_last = videohdmi10to1serializer2_source_source_last;
assign videohdmi10to1serializer2_sink_payload_data = videohdmi10to1serializer2_source_source_payload_data;
assign videohdmi10to1serializer2_source_ready = 1'd1;
assign videohdmi10to1serializer2_cdc_sink_valid = videohdmi10to1serializer2_sink_sink_valid;
assign videohdmi10to1serializer2_sink_sink_ready = videohdmi10to1serializer2_cdc_sink_ready;
assign videohdmi10to1serializer2_cdc_sink_first = videohdmi10to1serializer2_sink_sink_first;
assign videohdmi10to1serializer2_cdc_sink_last = videohdmi10to1serializer2_sink_sink_last;
assign videohdmi10to1serializer2_cdc_sink_payload_data = videohdmi10to1serializer2_sink_sink_payload_data;
assign videohdmi10to1serializer2_source_source_valid = videohdmi10to1serializer2_cdc_source_valid;
assign videohdmi10to1serializer2_cdc_source_ready = videohdmi10to1serializer2_source_source_ready;
assign videohdmi10to1serializer2_source_source_first = videohdmi10to1serializer2_cdc_source_first;
assign videohdmi10to1serializer2_source_source_last = videohdmi10to1serializer2_cdc_source_last;
assign videohdmi10to1serializer2_source_source_payload_data = videohdmi10to1serializer2_cdc_source_payload_data;
assign videohdmi10to1serializer2_cdc_asyncfifo2_din = {videohdmi10to1serializer2_cdc_fifo_in_last, videohdmi10to1serializer2_cdc_fifo_in_first, videohdmi10to1serializer2_cdc_fifo_in_payload_data};
assign {videohdmi10to1serializer2_cdc_fifo_out_last, videohdmi10to1serializer2_cdc_fifo_out_first, videohdmi10to1serializer2_cdc_fifo_out_payload_data} = videohdmi10to1serializer2_cdc_asyncfifo2_dout;
assign videohdmi10to1serializer2_cdc_sink_ready = videohdmi10to1serializer2_cdc_asyncfifo2_writable;
assign videohdmi10to1serializer2_cdc_asyncfifo2_we = videohdmi10to1serializer2_cdc_sink_valid;
assign videohdmi10to1serializer2_cdc_fifo_in_first = videohdmi10to1serializer2_cdc_sink_first;
assign videohdmi10to1serializer2_cdc_fifo_in_last = videohdmi10to1serializer2_cdc_sink_last;
assign videohdmi10to1serializer2_cdc_fifo_in_payload_data = videohdmi10to1serializer2_cdc_sink_payload_data;
assign videohdmi10to1serializer2_cdc_source_valid = videohdmi10to1serializer2_cdc_asyncfifo2_readable;
assign videohdmi10to1serializer2_cdc_source_first = videohdmi10to1serializer2_cdc_fifo_out_first;
assign videohdmi10to1serializer2_cdc_source_last = videohdmi10to1serializer2_cdc_fifo_out_last;
assign videohdmi10to1serializer2_cdc_source_payload_data = videohdmi10to1serializer2_cdc_fifo_out_payload_data;
assign videohdmi10to1serializer2_cdc_asyncfifo2_re = videohdmi10to1serializer2_cdc_source_ready;
assign videohdmi10to1serializer2_cdc_graycounter4_ce = (videohdmi10to1serializer2_cdc_asyncfifo2_writable & videohdmi10to1serializer2_cdc_asyncfifo2_we);
assign videohdmi10to1serializer2_cdc_graycounter5_ce = (videohdmi10to1serializer2_cdc_asyncfifo2_readable & videohdmi10to1serializer2_cdc_asyncfifo2_re);
assign videohdmi10to1serializer2_cdc_asyncfifo2_writable = (((videohdmi10to1serializer2_cdc_graycounter4_q[2] == videohdmi10to1serializer2_cdc_consume_wdomain[2]) | (videohdmi10to1serializer2_cdc_graycounter4_q[1] == videohdmi10to1serializer2_cdc_consume_wdomain[1])) | (videohdmi10to1serializer2_cdc_graycounter4_q[0] != videohdmi10to1serializer2_cdc_consume_wdomain[0]));
assign videohdmi10to1serializer2_cdc_asyncfifo2_readable = (videohdmi10to1serializer2_cdc_graycounter5_q != videohdmi10to1serializer2_cdc_produce_rdomain);
assign videohdmi10to1serializer2_cdc_wrport_adr = videohdmi10to1serializer2_cdc_graycounter4_q_binary[1:0];
assign videohdmi10to1serializer2_cdc_wrport_dat_w = videohdmi10to1serializer2_cdc_asyncfifo2_din;
assign videohdmi10to1serializer2_cdc_wrport_we = videohdmi10to1serializer2_cdc_graycounter4_ce;
assign videohdmi10to1serializer2_cdc_rdport_adr = videohdmi10to1serializer2_cdc_graycounter5_q_next_binary[1:0];
assign videohdmi10to1serializer2_cdc_asyncfifo2_dout = videohdmi10to1serializer2_cdc_rdport_dat_r;
always @(*) begin
    videohdmi10to1serializer2_cdc_graycounter4_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer2_cdc_graycounter4_ce) begin
        videohdmi10to1serializer2_cdc_graycounter4_q_next_binary <= (videohdmi10to1serializer2_cdc_graycounter4_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer2_cdc_graycounter4_q_next_binary <= videohdmi10to1serializer2_cdc_graycounter4_q_binary;
    end
end
assign videohdmi10to1serializer2_cdc_graycounter4_q_next = (videohdmi10to1serializer2_cdc_graycounter4_q_next_binary ^ videohdmi10to1serializer2_cdc_graycounter4_q_next_binary[2:1]);
always @(*) begin
    videohdmi10to1serializer2_cdc_graycounter5_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer2_cdc_graycounter5_ce) begin
        videohdmi10to1serializer2_cdc_graycounter5_q_next_binary <= (videohdmi10to1serializer2_cdc_graycounter5_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer2_cdc_graycounter5_q_next_binary <= videohdmi10to1serializer2_cdc_graycounter5_q_binary;
    end
end
assign videohdmi10to1serializer2_cdc_graycounter5_q_next = (videohdmi10to1serializer2_cdc_graycounter5_q_next_binary ^ videohdmi10to1serializer2_cdc_graycounter5_q_next_binary[2:1]);
assign videohdmi10to1serializer2_sink_ready = (videohdmi10to1serializer2_level < 4'd10);
assign videohdmi10to1serializer2_source_valid = (videohdmi10to1serializer2_level >= 2'd2);
assign videohdmi10to1serializer2_i_inc = (videohdmi10to1serializer2_sink_valid & videohdmi10to1serializer2_sink_ready);
assign videohdmi10to1serializer2_o_inc = (videohdmi10to1serializer2_source_valid & videohdmi10to1serializer2_source_ready);
assign videohdmi10to1serializer2_i_data = {videohdmi10to1serializer2_sink_payload_data[0], videohdmi10to1serializer2_sink_payload_data[1], videohdmi10to1serializer2_sink_payload_data[2], videohdmi10to1serializer2_sink_payload_data[3], videohdmi10to1serializer2_sink_payload_data[4], videohdmi10to1serializer2_sink_payload_data[5], videohdmi10to1serializer2_sink_payload_data[6], videohdmi10to1serializer2_sink_payload_data[7], videohdmi10to1serializer2_sink_payload_data[8], videohdmi10to1serializer2_sink_payload_data[9]};
always @(*) begin
    videohdmi10to1serializer2_o_data <= 2'd0;
    case (videohdmi10to1serializer2_o_count)
        1'd0: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[19:18];
        end
        1'd1: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[17:16];
        end
        2'd2: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[15:14];
        end
        2'd3: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[13:12];
        end
        3'd4: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[11:10];
        end
        3'd5: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[9:8];
        end
        3'd6: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[7:6];
        end
        3'd7: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[5:4];
        end
        4'd8: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[3:2];
        end
        4'd9: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[1:0];
        end
    endcase
end
assign videohdmi10to1serializer2_source_payload_data = {videohdmi10to1serializer2_o_data[0], videohdmi10to1serializer2_o_data[1]};
assign vtg_reset = (~vtg_enable);
assign vtg_source_payload_de = (vtg_hactive & vtg_vactive);
always @(*) begin
    basesoc_videotiminggenerator_next_state <= 1'd0;
    vtg_hactive_clockdomainsrenamer0_next_value0 <= 1'd0;
    vtg_source_payload_vsync_clockdomainsrenamer0_next_value7 <= 1'd0;
    vtg_hactive_clockdomainsrenamer0_next_value_ce0 <= 1'd0;
    vtg_source_payload_vsync_clockdomainsrenamer0_next_value_ce7 <= 1'd0;
    vtg_vactive_clockdomainsrenamer0_next_value1 <= 1'd0;
    vtg_vactive_clockdomainsrenamer0_next_value_ce1 <= 1'd0;
    vtg_source_payload_hres_clockdomainsrenamer0_next_value2 <= 12'd0;
    vtg_source_payload_hres_clockdomainsrenamer0_next_value_ce2 <= 1'd0;
    vtg_source_payload_vres_clockdomainsrenamer0_next_value3 <= 12'd0;
    vtg_source_payload_vres_clockdomainsrenamer0_next_value_ce3 <= 1'd0;
    vtg_source_payload_hcount_clockdomainsrenamer0_next_value4 <= 12'd0;
    vtg_source_payload_hcount_clockdomainsrenamer0_next_value_ce4 <= 1'd0;
    vtg_source_payload_vcount_clockdomainsrenamer0_next_value5 <= 12'd0;
    vtg_source_payload_vcount_clockdomainsrenamer0_next_value_ce5 <= 1'd0;
    vtg_source_valid <= 1'd0;
    vtg_source_payload_hsync_clockdomainsrenamer0_next_value6 <= 1'd0;
    vtg_source_payload_hsync_clockdomainsrenamer0_next_value_ce6 <= 1'd0;
    basesoc_videotiminggenerator_next_state <= basesoc_videotiminggenerator_state;
    case (basesoc_videotiminggenerator_state)
        1'd1: begin
            vtg_source_valid <= 1'd1;
            if (vtg_source_ready) begin
                vtg_source_payload_hcount_clockdomainsrenamer0_next_value4 <= (vtg_source_payload_hcount + 1'd1);
                vtg_source_payload_hcount_clockdomainsrenamer0_next_value_ce4 <= 1'd1;
                if ((vtg_source_payload_hcount == 1'd0)) begin
                    vtg_hactive_clockdomainsrenamer0_next_value0 <= 1'd1;
                    vtg_hactive_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
                end
                if ((vtg_source_payload_hcount == vtg_hres)) begin
                    vtg_hactive_clockdomainsrenamer0_next_value0 <= 1'd0;
                    vtg_hactive_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
                end
                if ((vtg_source_payload_hcount == vtg_hsync_start)) begin
                    vtg_source_payload_hsync_clockdomainsrenamer0_next_value6 <= 1'd1;
                    vtg_source_payload_hsync_clockdomainsrenamer0_next_value_ce6 <= 1'd1;
                end
                if ((vtg_source_payload_hcount == vtg_hsync_end)) begin
                    vtg_source_payload_hsync_clockdomainsrenamer0_next_value6 <= 1'd0;
                    vtg_source_payload_hsync_clockdomainsrenamer0_next_value_ce6 <= 1'd1;
                end
                if ((vtg_source_payload_hcount == vtg_hscan)) begin
                    vtg_source_payload_hcount_clockdomainsrenamer0_next_value4 <= 1'd0;
                    vtg_source_payload_hcount_clockdomainsrenamer0_next_value_ce4 <= 1'd1;
                end
                if ((vtg_source_payload_hcount == vtg_hsync_start)) begin
                    vtg_source_payload_vcount_clockdomainsrenamer0_next_value5 <= (vtg_source_payload_vcount + 1'd1);
                    vtg_source_payload_vcount_clockdomainsrenamer0_next_value_ce5 <= 1'd1;
                    if ((vtg_source_payload_vcount == 1'd0)) begin
                        vtg_vactive_clockdomainsrenamer0_next_value1 <= 1'd1;
                        vtg_vactive_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
                    end
                    if ((vtg_source_payload_vcount == vtg_vres)) begin
                        vtg_vactive_clockdomainsrenamer0_next_value1 <= 1'd0;
                        vtg_vactive_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
                    end
                    if ((vtg_source_payload_vcount == vtg_vsync_start)) begin
                        vtg_source_payload_vsync_clockdomainsrenamer0_next_value7 <= 1'd1;
                        vtg_source_payload_vsync_clockdomainsrenamer0_next_value_ce7 <= 1'd1;
                    end
                    if ((vtg_source_payload_vcount == vtg_vsync_end)) begin
                        vtg_source_payload_vsync_clockdomainsrenamer0_next_value7 <= 1'd0;
                        vtg_source_payload_vsync_clockdomainsrenamer0_next_value_ce7 <= 1'd1;
                    end
                    if ((vtg_source_payload_vcount == vtg_vscan)) begin
                        vtg_source_payload_vcount_clockdomainsrenamer0_next_value5 <= 1'd0;
                        vtg_source_payload_vcount_clockdomainsrenamer0_next_value_ce5 <= 1'd1;
                    end
                end
            end
        end
        default: begin
            vtg_hactive_clockdomainsrenamer0_next_value0 <= 1'd0;
            vtg_hactive_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
            vtg_vactive_clockdomainsrenamer0_next_value1 <= 1'd0;
            vtg_vactive_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
            vtg_source_payload_hres_clockdomainsrenamer0_next_value2 <= vtg_hres;
            vtg_source_payload_hres_clockdomainsrenamer0_next_value_ce2 <= 1'd1;
            vtg_source_payload_vres_clockdomainsrenamer0_next_value3 <= vtg_vres;
            vtg_source_payload_vres_clockdomainsrenamer0_next_value_ce3 <= 1'd1;
            vtg_source_payload_hcount_clockdomainsrenamer0_next_value4 <= 1'd0;
            vtg_source_payload_hcount_clockdomainsrenamer0_next_value_ce4 <= 1'd1;
            vtg_source_payload_vcount_clockdomainsrenamer0_next_value5 <= 1'd0;
            vtg_source_payload_vcount_clockdomainsrenamer0_next_value_ce5 <= 1'd1;
            basesoc_videotiminggenerator_next_state <= 1'd1;
        end
    endcase
end
assign colorbarspattern_reset = (~colorbarspattern_enable0);
always @(*) begin
    colorbarspattern_source_payload_r <= 8'd0;
    colorbarspattern_source_payload_g <= 8'd0;
    colorbarspattern_source_payload_b <= 8'd0;
    case (colorbarspattern_bar)
        1'd0: begin
            colorbarspattern_source_payload_r <= 8'd255;
            colorbarspattern_source_payload_g <= 8'd255;
            colorbarspattern_source_payload_b <= 8'd255;
        end
        1'd1: begin
            colorbarspattern_source_payload_r <= 8'd255;
            colorbarspattern_source_payload_g <= 8'd255;
            colorbarspattern_source_payload_b <= 1'd0;
        end
        2'd2: begin
            colorbarspattern_source_payload_r <= 1'd0;
            colorbarspattern_source_payload_g <= 8'd255;
            colorbarspattern_source_payload_b <= 8'd255;
        end
        2'd3: begin
            colorbarspattern_source_payload_r <= 1'd0;
            colorbarspattern_source_payload_g <= 8'd255;
            colorbarspattern_source_payload_b <= 1'd0;
        end
        3'd4: begin
            colorbarspattern_source_payload_r <= 8'd255;
            colorbarspattern_source_payload_g <= 1'd0;
            colorbarspattern_source_payload_b <= 8'd255;
        end
        3'd5: begin
            colorbarspattern_source_payload_r <= 8'd255;
            colorbarspattern_source_payload_g <= 1'd0;
            colorbarspattern_source_payload_b <= 1'd0;
        end
        3'd6: begin
            colorbarspattern_source_payload_r <= 1'd0;
            colorbarspattern_source_payload_g <= 1'd0;
            colorbarspattern_source_payload_b <= 8'd255;
        end
        3'd7: begin
            colorbarspattern_source_payload_r <= 1'd0;
            colorbarspattern_source_payload_g <= 1'd0;
            colorbarspattern_source_payload_b <= 1'd0;
        end
    endcase
end
always @(*) begin
    colorbarspattern_source_valid <= 1'd0;
    basesoc_colorbarspattern_next_state <= 1'd0;
    colorbarspattern_pix_clockdomainsrenamer1_next_value0 <= 12'd0;
    colorbarspattern_pix_clockdomainsrenamer1_next_value_ce0 <= 1'd0;
    colorbarspattern_source_last <= 1'd0;
    colorbarspattern_source_payload_hsync <= 1'd0;
    colorbarspattern_bar_clockdomainsrenamer1_next_value1 <= 3'd0;
    colorbarspattern_source_payload_vsync <= 1'd0;
    colorbarspattern_bar_clockdomainsrenamer1_next_value_ce1 <= 1'd0;
    colorbarspattern_vtg_sink_ready <= 1'd0;
    colorbarspattern_source_payload_de <= 1'd0;
    basesoc_colorbarspattern_next_state <= basesoc_colorbarspattern_state;
    case (basesoc_colorbarspattern_state)
        1'd1: begin
            colorbarspattern_source_valid <= colorbarspattern_vtg_sink_valid;
            colorbarspattern_vtg_sink_ready <= colorbarspattern_source_ready;
            colorbarspattern_source_last <= colorbarspattern_vtg_sink_last;
            colorbarspattern_source_payload_hsync <= colorbarspattern_vtg_sink_payload_hsync;
            colorbarspattern_source_payload_vsync <= colorbarspattern_vtg_sink_payload_vsync;
            colorbarspattern_source_payload_de <= colorbarspattern_vtg_sink_payload_de;
            if (((colorbarspattern_source_valid & colorbarspattern_source_ready) & colorbarspattern_source_payload_de)) begin
                colorbarspattern_pix_clockdomainsrenamer1_next_value0 <= (colorbarspattern_pix + 1'd1);
                colorbarspattern_pix_clockdomainsrenamer1_next_value_ce0 <= 1'd1;
                if ((colorbarspattern_pix == (colorbarspattern_vtg_sink_payload_hres[11:3] - 1'd1))) begin
                    colorbarspattern_pix_clockdomainsrenamer1_next_value0 <= 1'd0;
                    colorbarspattern_pix_clockdomainsrenamer1_next_value_ce0 <= 1'd1;
                    colorbarspattern_bar_clockdomainsrenamer1_next_value1 <= (colorbarspattern_bar + 1'd1);
                    colorbarspattern_bar_clockdomainsrenamer1_next_value_ce1 <= 1'd1;
                end
            end else begin
                colorbarspattern_pix_clockdomainsrenamer1_next_value0 <= 1'd0;
                colorbarspattern_pix_clockdomainsrenamer1_next_value_ce0 <= 1'd1;
                colorbarspattern_bar_clockdomainsrenamer1_next_value1 <= 1'd0;
                colorbarspattern_bar_clockdomainsrenamer1_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
            colorbarspattern_pix_clockdomainsrenamer1_next_value0 <= 1'd0;
            colorbarspattern_pix_clockdomainsrenamer1_next_value_ce0 <= 1'd1;
            colorbarspattern_bar_clockdomainsrenamer1_next_value1 <= 1'd0;
            colorbarspattern_bar_clockdomainsrenamer1_next_value_ce1 <= 1'd1;
            colorbarspattern_vtg_sink_ready <= 1'd1;
            if ((((colorbarspattern_vtg_sink_valid & colorbarspattern_vtg_sink_first) & (colorbarspattern_vtg_sink_payload_hcount == 1'd0)) & (colorbarspattern_vtg_sink_payload_vcount == 1'd0))) begin
                colorbarspattern_vtg_sink_ready <= 1'd0;
                basesoc_colorbarspattern_next_state <= 1'd1;
            end
        end
    endcase
end
assign wait_1 = (~done);
always @(*) begin
    leds <= 8'd0;
    if ((mode == 1'd1)) begin
        leds <= storage;
    end else begin
        leds <= chaser;
    end
end
assign {user_led_n7, user_led_n6, user_led_n5, user_led_n4, user_led_n3, user_led_n2, user_led_n1, user_led_n0} = (leds ^ 1'd0);
assign done = (count == 1'd0);
always @(*) begin
    basesoc_wishbone_dat_r <= 32'd0;
    basesoc_wishbone_ack <= 1'd0;
    basesoc_adr <= 14'd0;
    basesoc_we <= 1'd0;
    basesoc_dat_w <= 32'd0;
    basesoc_next_state <= 1'd0;
    basesoc_next_state <= basesoc_state;
    case (basesoc_state)
        1'd1: begin
            basesoc_wishbone_ack <= 1'd1;
            basesoc_wishbone_dat_r <= basesoc_dat_r;
            basesoc_next_state <= 1'd0;
        end
        default: begin
            basesoc_dat_w <= basesoc_wishbone_dat_w;
            if ((basesoc_wishbone_cyc & basesoc_wishbone_stb)) begin
                basesoc_adr <= basesoc_wishbone_adr;
                basesoc_we <= (basesoc_wishbone_we & (basesoc_wishbone_sel != 1'd0));
                basesoc_next_state <= 1'd1;
            end
        end
    endcase
end
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank0_reset0_r = csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank0_reset0_re <= 1'd0;
    csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_reset0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_reset0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_scratch0_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_scratch0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_scratch0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_bus_errors_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_bus_errors_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_bus_errors_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign csr_bankarray_csrbank1_out0_r = csr_bankarray_interface1_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank1_out0_we <= 1'd0;
    csr_bankarray_csrbank1_out0_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_out0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_out0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_out0_w = storage[7:0];
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign csr_bankarray_csrbank2_load0_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank2_load0_we <= 1'd0;
    csr_bankarray_csrbank2_load0_re <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank2_load0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_load0_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
assign csr_bankarray_csrbank2_reload0_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank2_reload0_re <= 1'd0;
    csr_bankarray_csrbank2_reload0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank2_reload0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_reload0_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
assign csr_bankarray_csrbank2_en0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_en0_re <= 1'd0;
    csr_bankarray_csrbank2_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank2_en0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_en0_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
assign csr_bankarray_csrbank2_update_value0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_update_value0_we <= 1'd0;
    csr_bankarray_csrbank2_update_value0_re <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank2_update_value0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_update_value0_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
assign csr_bankarray_csrbank2_value_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank2_value_re <= 1'd0;
    csr_bankarray_csrbank2_value_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank2_value_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_value_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
assign csr_bankarray_csrbank2_ev_status_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_ev_status_re <= 1'd0;
    csr_bankarray_csrbank2_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank2_ev_status_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_status_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
assign csr_bankarray_csrbank2_ev_pending_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
    csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank2_ev_pending_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_pending_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
assign csr_bankarray_csrbank2_ev_enable0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank2_ev_enable0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_enable0_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
assign csr_bankarray_csrbank2_load0_w = timer_load_storage[31:0];
assign csr_bankarray_csrbank2_reload0_w = timer_reload_storage[31:0];
assign csr_bankarray_csrbank2_en0_w = timer_en_storage;
assign csr_bankarray_csrbank2_update_value0_w = timer_update_value_storage;
assign csr_bankarray_csrbank2_value_w = timer_value_status[31:0];
assign timer_value_we = csr_bankarray_csrbank2_value_we;
assign timer_status_status = timer_zero0;
assign csr_bankarray_csrbank2_ev_status_w = timer_status_status;
assign timer_status_we = csr_bankarray_csrbank2_ev_status_we;
assign timer_pending_status = timer_zero1;
assign csr_bankarray_csrbank2_ev_pending_w = timer_pending_status;
assign timer_pending_we = csr_bankarray_csrbank2_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign csr_bankarray_csrbank2_ev_enable0_w = timer_enable_storage;
assign csr_bankarray_csrbank3_sel = (csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign uart_rxtx_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    uart_rxtx_re <= 1'd0;
    uart_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        uart_rxtx_re <= csr_bankarray_interface3_bank_bus_we;
        uart_rxtx_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_txfull_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_txfull_re <= 1'd0;
    csr_bankarray_csrbank3_txfull_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank3_txfull_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_txfull_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_rxempty_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_rxempty_we <= 1'd0;
    csr_bankarray_csrbank3_rxempty_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank3_rxempty_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_rxempty_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_ev_status_r = csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank3_ev_status_we <= 1'd0;
    csr_bankarray_csrbank3_ev_status_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank3_ev_status_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_status_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_ev_pending_r = csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank3_ev_pending_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_pending_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_ev_enable0_r = csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank3_ev_enable0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_enable0_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_txempty_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_txempty_we <= 1'd0;
    csr_bankarray_csrbank3_txempty_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank3_txempty_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_txempty_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_rxfull_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_rxfull_re <= 1'd0;
    csr_bankarray_csrbank3_rxfull_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank3_rxfull_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_rxfull_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_txfull_w = uart_txfull_status;
assign uart_txfull_we = csr_bankarray_csrbank3_txfull_we;
assign csr_bankarray_csrbank3_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csr_bankarray_csrbank3_rxempty_we;
always @(*) begin
    uart_status_status <= 2'd0;
    uart_status_status[0] <= uart_tx0;
    uart_status_status[1] <= uart_rx0;
end
assign csr_bankarray_csrbank3_ev_status_w = uart_status_status[1:0];
assign uart_status_we = csr_bankarray_csrbank3_ev_status_we;
always @(*) begin
    uart_pending_status <= 2'd0;
    uart_pending_status[0] <= uart_tx1;
    uart_pending_status[1] <= uart_rx1;
end
assign csr_bankarray_csrbank3_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = csr_bankarray_csrbank3_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign csr_bankarray_csrbank3_ev_enable0_w = uart_enable_storage[1:0];
assign csr_bankarray_csrbank3_txempty_w = uart_txempty_status;
assign uart_txempty_we = csr_bankarray_csrbank3_txempty_we;
assign csr_bankarray_csrbank3_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csr_bankarray_csrbank3_rxfull_we;
assign csr_bankarray_csrbank4_sel = (csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign csr_bankarray_csrbank4_enable0_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_enable0_re <= 1'd0;
    csr_bankarray_csrbank4_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank4_enable0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_enable0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_hres0_r = csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank4_hres0_we <= 1'd0;
    csr_bankarray_csrbank4_hres0_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank4_hres0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_hres0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_hsync_start0_r = csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank4_hsync_start0_we <= 1'd0;
    csr_bankarray_csrbank4_hsync_start0_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank4_hsync_start0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_hsync_start0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_hsync_end0_r = csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank4_hsync_end0_re <= 1'd0;
    csr_bankarray_csrbank4_hsync_end0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank4_hsync_end0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_hsync_end0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_hscan0_r = csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank4_hscan0_we <= 1'd0;
    csr_bankarray_csrbank4_hscan0_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank4_hscan0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_hscan0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_vres0_r = csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank4_vres0_re <= 1'd0;
    csr_bankarray_csrbank4_vres0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank4_vres0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_vres0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_vsync_start0_r = csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank4_vsync_start0_re <= 1'd0;
    csr_bankarray_csrbank4_vsync_start0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank4_vsync_start0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_vsync_start0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_vsync_end0_r = csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank4_vsync_end0_we <= 1'd0;
    csr_bankarray_csrbank4_vsync_end0_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank4_vsync_end0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_vsync_end0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_vscan0_r = csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank4_vscan0_re <= 1'd0;
    csr_bankarray_csrbank4_vscan0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd8))) begin
        csr_bankarray_csrbank4_vscan0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_vscan0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_enable0_w = vtg_enable_storage;
assign csr_bankarray_csrbank4_hres0_w = vtg_hres_storage[11:0];
assign csr_bankarray_csrbank4_hsync_start0_w = vtg_hsync_start_storage[11:0];
assign csr_bankarray_csrbank4_hsync_end0_w = vtg_hsync_end_storage[11:0];
assign csr_bankarray_csrbank4_hscan0_w = vtg_hscan_storage[11:0];
assign csr_bankarray_csrbank4_vres0_w = vtg_vres_storage[11:0];
assign csr_bankarray_csrbank4_vsync_start0_w = vtg_vsync_start_storage[11:0];
assign csr_bankarray_csrbank4_vsync_end0_w = vtg_vsync_end_storage[11:0];
assign csr_bankarray_csrbank4_vscan0_w = vtg_vscan_storage[11:0];
assign csr_interconnect_adr = basesoc_adr;
assign csr_interconnect_we = basesoc_we;
assign csr_interconnect_dat_w = basesoc_dat_w;
assign basesoc_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface3_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface4_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface3_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface4_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_interface3_bank_bus_dat_r) | csr_bankarray_interface4_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
always @(*) begin
    array_muxed0 <= 10'd0;
    case (tmdsencoder0_new_c2)
        1'd0: begin
            array_muxed0 <= 10'd852;
        end
        1'd1: begin
            array_muxed0 <= 8'd171;
        end
        2'd2: begin
            array_muxed0 <= 9'd340;
        end
        default: begin
            array_muxed0 <= 10'd683;
        end
    endcase
end
always @(*) begin
    array_muxed1 <= 10'd0;
    case (tmdsencoder1_new_c2)
        1'd0: begin
            array_muxed1 <= 10'd852;
        end
        1'd1: begin
            array_muxed1 <= 8'd171;
        end
        2'd2: begin
            array_muxed1 <= 9'd340;
        end
        default: begin
            array_muxed1 <= 10'd683;
        end
    endcase
end
always @(*) begin
    array_muxed2 <= 10'd0;
    case (tmdsencoder2_new_c2)
        1'd0: begin
            array_muxed2 <= 10'd852;
        end
        1'd1: begin
            array_muxed2 <= 8'd171;
        end
        2'd2: begin
            array_muxed2 <= 9'd340;
        end
        default: begin
            array_muxed2 <= 10'd683;
        end
    endcase
end
assign xilinxasyncresetsynchronizerimpl0 = (~pll_locked);
assign xilinxasyncresetsynchronizerimpl1 = (~pll2_locked);
assign xilinxasyncresetsynchronizerimpl2 = (~pll2_locked);
assign videohdmi10to1serializer0_cdc_produce_rdomain = xilinxmultiregimpl0_regs1;
assign videohdmi10to1serializer0_cdc_consume_wdomain = xilinxmultiregimpl1_regs1;
assign videohdmi10to1serializer1_cdc_produce_rdomain = xilinxmultiregimpl2_regs1;
assign videohdmi10to1serializer1_cdc_consume_wdomain = xilinxmultiregimpl3_regs1;
assign videohdmi10to1serializer2_cdc_produce_rdomain = xilinxmultiregimpl4_regs1;
assign videohdmi10to1serializer2_cdc_consume_wdomain = xilinxmultiregimpl5_regs1;
assign vtg_enable = xilinxmultiregimpl6_regs1;
assign vtg_hres = xilinxmultiregimpl7_regs1;
assign vtg_hsync_start = xilinxmultiregimpl8_regs1;
assign vtg_hsync_end = xilinxmultiregimpl9_regs1;
assign vtg_hscan = xilinxmultiregimpl10_regs1;
assign vtg_vres = xilinxmultiregimpl11_regs1;
assign vtg_vsync_start = xilinxmultiregimpl12_regs1;
assign vtg_vsync_end = xilinxmultiregimpl13_regs1;
assign vtg_vscan = xilinxmultiregimpl14_regs1;
assign colorbarspattern_enable1 = xilinxmultiregimpl15_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge hdmi_clk) begin
    tmdsencoder0_n1d <= (((((((tmdsencoder0_d0[0] + tmdsencoder0_d0[1]) + tmdsencoder0_d0[2]) + tmdsencoder0_d0[3]) + tmdsencoder0_d0[4]) + tmdsencoder0_d0[5]) + tmdsencoder0_d0[6]) + tmdsencoder0_d0[7]);
    tmdsencoder0_d1 <= tmdsencoder0_d0;
    tmdsencoder0_q_m[0] <= tmdsencoder0_d1[0];
    tmdsencoder0_q_m[1] <= ((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_q_m[2] <= ((((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[2]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_q_m[3] <= ((((((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[2]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[3]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_q_m[4] <= ((((((((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[2]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[3]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[4]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_q_m[5] <= ((((((((((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[2]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[3]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[4]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[5]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_q_m[6] <= ((((((((((((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[2]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[3]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[4]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[5]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[6]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_q_m[7] <= ((((((((((((((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[2]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[3]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[4]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[5]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[6]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[7]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_q_m[8] <= (~tmdsencoder0_q_m8_n);
    tmdsencoder0_n0q_m <= ((((((((~tmdsencoder0_q_m[0]) + (~tmdsencoder0_q_m[1])) + (~tmdsencoder0_q_m[2])) + (~tmdsencoder0_q_m[3])) + (~tmdsencoder0_q_m[4])) + (~tmdsencoder0_q_m[5])) + (~tmdsencoder0_q_m[6])) + (~tmdsencoder0_q_m[7]));
    tmdsencoder0_n1q_m <= (((((((tmdsencoder0_q_m[0] + tmdsencoder0_q_m[1]) + tmdsencoder0_q_m[2]) + tmdsencoder0_q_m[3]) + tmdsencoder0_q_m[4]) + tmdsencoder0_q_m[5]) + tmdsencoder0_q_m[6]) + tmdsencoder0_q_m[7]);
    tmdsencoder0_q_m_r <= tmdsencoder0_q_m;
    tmdsencoder0_new_c0 <= tmdsencoder0_c;
    tmdsencoder0_new_de0 <= tmdsencoder0_de;
    tmdsencoder0_new_c1 <= tmdsencoder0_new_c0;
    tmdsencoder0_new_de1 <= tmdsencoder0_new_de0;
    tmdsencoder0_new_c2 <= tmdsencoder0_new_c1;
    tmdsencoder0_new_de2 <= tmdsencoder0_new_de1;
    if (tmdsencoder0_new_de2) begin
        if (((tmdsencoder0_cnt == $signed({1'd0, 1'd0})) | $signed({1'd0, (tmdsencoder0_n1q_m == tmdsencoder0_n0q_m)}))) begin
            tmdsencoder0_out[9] <= (~tmdsencoder0_q_m_r[8]);
            tmdsencoder0_out[8] <= tmdsencoder0_q_m_r[8];
            if (tmdsencoder0_q_m_r[8]) begin
                tmdsencoder0_out[7:0] <= tmdsencoder0_q_m_r[7:0];
                tmdsencoder0_cnt <= ((tmdsencoder0_cnt + $signed({1'd0, tmdsencoder0_n1q_m})) - $signed({1'd0, tmdsencoder0_n0q_m}));
            end else begin
                tmdsencoder0_out[7:0] <= (~tmdsencoder0_q_m_r[7:0]);
                tmdsencoder0_cnt <= ((tmdsencoder0_cnt + $signed({1'd0, tmdsencoder0_n0q_m})) - $signed({1'd0, tmdsencoder0_n1q_m}));
            end
        end else begin
            if ((((~tmdsencoder0_cnt[5]) & $signed({1'd0, (tmdsencoder0_n1q_m > tmdsencoder0_n0q_m)})) | (tmdsencoder0_cnt[5] & $signed({1'd0, (tmdsencoder0_n0q_m > tmdsencoder0_n1q_m)})))) begin
                tmdsencoder0_out[9] <= 1'd1;
                tmdsencoder0_out[8] <= tmdsencoder0_q_m_r[8];
                tmdsencoder0_out[7:0] <= (~tmdsencoder0_q_m_r[7:0]);
                tmdsencoder0_cnt <= (((tmdsencoder0_cnt + $signed({1'd0, {tmdsencoder0_q_m_r[8], 1'd0}})) + $signed({1'd0, tmdsencoder0_n0q_m})) - $signed({1'd0, tmdsencoder0_n1q_m}));
            end else begin
                tmdsencoder0_out[9] <= 1'd0;
                tmdsencoder0_out[8] <= tmdsencoder0_q_m_r[8];
                tmdsencoder0_out[7:0] <= tmdsencoder0_q_m_r[7:0];
                tmdsencoder0_cnt <= (((tmdsencoder0_cnt - $signed({1'd0, {(~tmdsencoder0_q_m_r[8]), 1'd0}})) + $signed({1'd0, tmdsencoder0_n1q_m})) - $signed({1'd0, tmdsencoder0_n0q_m}));
            end
        end
    end else begin
        tmdsencoder0_out <= array_muxed0;
        tmdsencoder0_cnt <= 1'd0;
    end
    videohdmi10to1serializer0_cdc_graycounter0_q_binary <= videohdmi10to1serializer0_cdc_graycounter0_q_next_binary;
    videohdmi10to1serializer0_cdc_graycounter0_q <= videohdmi10to1serializer0_cdc_graycounter0_q_next;
    tmdsencoder1_n1d <= (((((((tmdsencoder1_d0[0] + tmdsencoder1_d0[1]) + tmdsencoder1_d0[2]) + tmdsencoder1_d0[3]) + tmdsencoder1_d0[4]) + tmdsencoder1_d0[5]) + tmdsencoder1_d0[6]) + tmdsencoder1_d0[7]);
    tmdsencoder1_d1 <= tmdsencoder1_d0;
    tmdsencoder1_q_m[0] <= tmdsencoder1_d1[0];
    tmdsencoder1_q_m[1] <= ((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_q_m[2] <= ((((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[2]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_q_m[3] <= ((((((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[2]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[3]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_q_m[4] <= ((((((((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[2]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[3]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[4]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_q_m[5] <= ((((((((((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[2]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[3]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[4]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[5]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_q_m[6] <= ((((((((((((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[2]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[3]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[4]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[5]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[6]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_q_m[7] <= ((((((((((((((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[2]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[3]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[4]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[5]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[6]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[7]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_q_m[8] <= (~tmdsencoder1_q_m8_n);
    tmdsencoder1_n0q_m <= ((((((((~tmdsencoder1_q_m[0]) + (~tmdsencoder1_q_m[1])) + (~tmdsencoder1_q_m[2])) + (~tmdsencoder1_q_m[3])) + (~tmdsencoder1_q_m[4])) + (~tmdsencoder1_q_m[5])) + (~tmdsencoder1_q_m[6])) + (~tmdsencoder1_q_m[7]));
    tmdsencoder1_n1q_m <= (((((((tmdsencoder1_q_m[0] + tmdsencoder1_q_m[1]) + tmdsencoder1_q_m[2]) + tmdsencoder1_q_m[3]) + tmdsencoder1_q_m[4]) + tmdsencoder1_q_m[5]) + tmdsencoder1_q_m[6]) + tmdsencoder1_q_m[7]);
    tmdsencoder1_q_m_r <= tmdsencoder1_q_m;
    tmdsencoder1_new_c0 <= tmdsencoder1_c;
    tmdsencoder1_new_de0 <= tmdsencoder1_de;
    tmdsencoder1_new_c1 <= tmdsencoder1_new_c0;
    tmdsencoder1_new_de1 <= tmdsencoder1_new_de0;
    tmdsencoder1_new_c2 <= tmdsencoder1_new_c1;
    tmdsencoder1_new_de2 <= tmdsencoder1_new_de1;
    if (tmdsencoder1_new_de2) begin
        if (((tmdsencoder1_cnt == $signed({1'd0, 1'd0})) | $signed({1'd0, (tmdsencoder1_n1q_m == tmdsencoder1_n0q_m)}))) begin
            tmdsencoder1_out[9] <= (~tmdsencoder1_q_m_r[8]);
            tmdsencoder1_out[8] <= tmdsencoder1_q_m_r[8];
            if (tmdsencoder1_q_m_r[8]) begin
                tmdsencoder1_out[7:0] <= tmdsencoder1_q_m_r[7:0];
                tmdsencoder1_cnt <= ((tmdsencoder1_cnt + $signed({1'd0, tmdsencoder1_n1q_m})) - $signed({1'd0, tmdsencoder1_n0q_m}));
            end else begin
                tmdsencoder1_out[7:0] <= (~tmdsencoder1_q_m_r[7:0]);
                tmdsencoder1_cnt <= ((tmdsencoder1_cnt + $signed({1'd0, tmdsencoder1_n0q_m})) - $signed({1'd0, tmdsencoder1_n1q_m}));
            end
        end else begin
            if ((((~tmdsencoder1_cnt[5]) & $signed({1'd0, (tmdsencoder1_n1q_m > tmdsencoder1_n0q_m)})) | (tmdsencoder1_cnt[5] & $signed({1'd0, (tmdsencoder1_n0q_m > tmdsencoder1_n1q_m)})))) begin
                tmdsencoder1_out[9] <= 1'd1;
                tmdsencoder1_out[8] <= tmdsencoder1_q_m_r[8];
                tmdsencoder1_out[7:0] <= (~tmdsencoder1_q_m_r[7:0]);
                tmdsencoder1_cnt <= (((tmdsencoder1_cnt + $signed({1'd0, {tmdsencoder1_q_m_r[8], 1'd0}})) + $signed({1'd0, tmdsencoder1_n0q_m})) - $signed({1'd0, tmdsencoder1_n1q_m}));
            end else begin
                tmdsencoder1_out[9] <= 1'd0;
                tmdsencoder1_out[8] <= tmdsencoder1_q_m_r[8];
                tmdsencoder1_out[7:0] <= tmdsencoder1_q_m_r[7:0];
                tmdsencoder1_cnt <= (((tmdsencoder1_cnt - $signed({1'd0, {(~tmdsencoder1_q_m_r[8]), 1'd0}})) + $signed({1'd0, tmdsencoder1_n1q_m})) - $signed({1'd0, tmdsencoder1_n0q_m}));
            end
        end
    end else begin
        tmdsencoder1_out <= array_muxed1;
        tmdsencoder1_cnt <= 1'd0;
    end
    videohdmi10to1serializer1_cdc_graycounter2_q_binary <= videohdmi10to1serializer1_cdc_graycounter2_q_next_binary;
    videohdmi10to1serializer1_cdc_graycounter2_q <= videohdmi10to1serializer1_cdc_graycounter2_q_next;
    tmdsencoder2_n1d <= (((((((tmdsencoder2_d0[0] + tmdsencoder2_d0[1]) + tmdsencoder2_d0[2]) + tmdsencoder2_d0[3]) + tmdsencoder2_d0[4]) + tmdsencoder2_d0[5]) + tmdsencoder2_d0[6]) + tmdsencoder2_d0[7]);
    tmdsencoder2_d1 <= tmdsencoder2_d0;
    tmdsencoder2_q_m[0] <= tmdsencoder2_d1[0];
    tmdsencoder2_q_m[1] <= ((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_q_m[2] <= ((((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[2]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_q_m[3] <= ((((((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[2]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[3]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_q_m[4] <= ((((((((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[2]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[3]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[4]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_q_m[5] <= ((((((((((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[2]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[3]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[4]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[5]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_q_m[6] <= ((((((((((((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[2]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[3]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[4]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[5]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[6]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_q_m[7] <= ((((((((((((((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[2]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[3]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[4]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[5]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[6]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[7]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_q_m[8] <= (~tmdsencoder2_q_m8_n);
    tmdsencoder2_n0q_m <= ((((((((~tmdsencoder2_q_m[0]) + (~tmdsencoder2_q_m[1])) + (~tmdsencoder2_q_m[2])) + (~tmdsencoder2_q_m[3])) + (~tmdsencoder2_q_m[4])) + (~tmdsencoder2_q_m[5])) + (~tmdsencoder2_q_m[6])) + (~tmdsencoder2_q_m[7]));
    tmdsencoder2_n1q_m <= (((((((tmdsencoder2_q_m[0] + tmdsencoder2_q_m[1]) + tmdsencoder2_q_m[2]) + tmdsencoder2_q_m[3]) + tmdsencoder2_q_m[4]) + tmdsencoder2_q_m[5]) + tmdsencoder2_q_m[6]) + tmdsencoder2_q_m[7]);
    tmdsencoder2_q_m_r <= tmdsencoder2_q_m;
    tmdsencoder2_new_c0 <= tmdsencoder2_c;
    tmdsencoder2_new_de0 <= tmdsencoder2_de;
    tmdsencoder2_new_c1 <= tmdsencoder2_new_c0;
    tmdsencoder2_new_de1 <= tmdsencoder2_new_de0;
    tmdsencoder2_new_c2 <= tmdsencoder2_new_c1;
    tmdsencoder2_new_de2 <= tmdsencoder2_new_de1;
    if (tmdsencoder2_new_de2) begin
        if (((tmdsencoder2_cnt == $signed({1'd0, 1'd0})) | $signed({1'd0, (tmdsencoder2_n1q_m == tmdsencoder2_n0q_m)}))) begin
            tmdsencoder2_out[9] <= (~tmdsencoder2_q_m_r[8]);
            tmdsencoder2_out[8] <= tmdsencoder2_q_m_r[8];
            if (tmdsencoder2_q_m_r[8]) begin
                tmdsencoder2_out[7:0] <= tmdsencoder2_q_m_r[7:0];
                tmdsencoder2_cnt <= ((tmdsencoder2_cnt + $signed({1'd0, tmdsencoder2_n1q_m})) - $signed({1'd0, tmdsencoder2_n0q_m}));
            end else begin
                tmdsencoder2_out[7:0] <= (~tmdsencoder2_q_m_r[7:0]);
                tmdsencoder2_cnt <= ((tmdsencoder2_cnt + $signed({1'd0, tmdsencoder2_n0q_m})) - $signed({1'd0, tmdsencoder2_n1q_m}));
            end
        end else begin
            if ((((~tmdsencoder2_cnt[5]) & $signed({1'd0, (tmdsencoder2_n1q_m > tmdsencoder2_n0q_m)})) | (tmdsencoder2_cnt[5] & $signed({1'd0, (tmdsencoder2_n0q_m > tmdsencoder2_n1q_m)})))) begin
                tmdsencoder2_out[9] <= 1'd1;
                tmdsencoder2_out[8] <= tmdsencoder2_q_m_r[8];
                tmdsencoder2_out[7:0] <= (~tmdsencoder2_q_m_r[7:0]);
                tmdsencoder2_cnt <= (((tmdsencoder2_cnt + $signed({1'd0, {tmdsencoder2_q_m_r[8], 1'd0}})) + $signed({1'd0, tmdsencoder2_n0q_m})) - $signed({1'd0, tmdsencoder2_n1q_m}));
            end else begin
                tmdsencoder2_out[9] <= 1'd0;
                tmdsencoder2_out[8] <= tmdsencoder2_q_m_r[8];
                tmdsencoder2_out[7:0] <= tmdsencoder2_q_m_r[7:0];
                tmdsencoder2_cnt <= (((tmdsencoder2_cnt - $signed({1'd0, {(~tmdsencoder2_q_m_r[8]), 1'd0}})) + $signed({1'd0, tmdsencoder2_n1q_m})) - $signed({1'd0, tmdsencoder2_n0q_m}));
            end
        end
    end else begin
        tmdsencoder2_out <= array_muxed2;
        tmdsencoder2_cnt <= 1'd0;
    end
    videohdmi10to1serializer2_cdc_graycounter4_q_binary <= videohdmi10to1serializer2_cdc_graycounter4_q_next_binary;
    videohdmi10to1serializer2_cdc_graycounter4_q <= videohdmi10to1serializer2_cdc_graycounter4_q_next;
    vtg_source_first <= ((vtg_source_payload_hcount == 1'd0) & (vtg_source_payload_vcount == 1'd0));
    vtg_source_last <= ((vtg_source_payload_hcount == vtg_hscan) & (vtg_source_payload_vcount == vtg_vscan));
    basesoc_videotiminggenerator_state <= basesoc_videotiminggenerator_next_state;
    if (vtg_hactive_clockdomainsrenamer0_next_value_ce0) begin
        vtg_hactive <= vtg_hactive_clockdomainsrenamer0_next_value0;
    end
    if (vtg_vactive_clockdomainsrenamer0_next_value_ce1) begin
        vtg_vactive <= vtg_vactive_clockdomainsrenamer0_next_value1;
    end
    if (vtg_source_payload_hres_clockdomainsrenamer0_next_value_ce2) begin
        vtg_source_payload_hres <= vtg_source_payload_hres_clockdomainsrenamer0_next_value2;
    end
    if (vtg_source_payload_vres_clockdomainsrenamer0_next_value_ce3) begin
        vtg_source_payload_vres <= vtg_source_payload_vres_clockdomainsrenamer0_next_value3;
    end
    if (vtg_source_payload_hcount_clockdomainsrenamer0_next_value_ce4) begin
        vtg_source_payload_hcount <= vtg_source_payload_hcount_clockdomainsrenamer0_next_value4;
    end
    if (vtg_source_payload_vcount_clockdomainsrenamer0_next_value_ce5) begin
        vtg_source_payload_vcount <= vtg_source_payload_vcount_clockdomainsrenamer0_next_value5;
    end
    if (vtg_source_payload_hsync_clockdomainsrenamer0_next_value_ce6) begin
        vtg_source_payload_hsync <= vtg_source_payload_hsync_clockdomainsrenamer0_next_value6;
    end
    if (vtg_source_payload_vsync_clockdomainsrenamer0_next_value_ce7) begin
        vtg_source_payload_vsync <= vtg_source_payload_vsync_clockdomainsrenamer0_next_value7;
    end
    if (vtg_reset) begin
        vtg_source_payload_hsync <= 1'd0;
        vtg_source_payload_vsync <= 1'd0;
        vtg_source_payload_hres <= 12'd0;
        vtg_source_payload_vres <= 12'd0;
        vtg_source_payload_hcount <= 12'd0;
        vtg_source_payload_vcount <= 12'd0;
        vtg_hactive <= 1'd0;
        vtg_vactive <= 1'd0;
        basesoc_videotiminggenerator_state <= 1'd0;
    end
    basesoc_colorbarspattern_state <= basesoc_colorbarspattern_next_state;
    if (colorbarspattern_pix_clockdomainsrenamer1_next_value_ce0) begin
        colorbarspattern_pix <= colorbarspattern_pix_clockdomainsrenamer1_next_value0;
    end
    if (colorbarspattern_bar_clockdomainsrenamer1_next_value_ce1) begin
        colorbarspattern_bar <= colorbarspattern_bar_clockdomainsrenamer1_next_value1;
    end
    if (colorbarspattern_reset) begin
        colorbarspattern_pix <= 12'd0;
        colorbarspattern_bar <= 3'd0;
        basesoc_colorbarspattern_state <= 1'd0;
    end
    if (hdmi_rst) begin
        tmdsencoder0_out <= 10'd0;
        tmdsencoder0_d1 <= 8'd0;
        tmdsencoder0_n1d <= 4'd0;
        tmdsencoder0_q_m <= 9'd0;
        tmdsencoder0_q_m_r <= 9'd0;
        tmdsencoder0_n0q_m <= 4'd0;
        tmdsencoder0_n1q_m <= 4'd0;
        tmdsencoder0_cnt <= 6'd0;
        tmdsencoder0_new_c0 <= 2'd0;
        tmdsencoder0_new_de0 <= 1'd0;
        tmdsencoder0_new_c1 <= 2'd0;
        tmdsencoder0_new_de1 <= 1'd0;
        tmdsencoder0_new_c2 <= 2'd0;
        tmdsencoder0_new_de2 <= 1'd0;
        videohdmi10to1serializer0_cdc_graycounter0_q <= 3'd0;
        videohdmi10to1serializer0_cdc_graycounter0_q_binary <= 3'd0;
        tmdsencoder1_out <= 10'd0;
        tmdsencoder1_d1 <= 8'd0;
        tmdsencoder1_n1d <= 4'd0;
        tmdsencoder1_q_m <= 9'd0;
        tmdsencoder1_q_m_r <= 9'd0;
        tmdsencoder1_n0q_m <= 4'd0;
        tmdsencoder1_n1q_m <= 4'd0;
        tmdsencoder1_cnt <= 6'd0;
        tmdsencoder1_new_c0 <= 2'd0;
        tmdsencoder1_new_de0 <= 1'd0;
        tmdsencoder1_new_c1 <= 2'd0;
        tmdsencoder1_new_de1 <= 1'd0;
        tmdsencoder1_new_c2 <= 2'd0;
        tmdsencoder1_new_de2 <= 1'd0;
        videohdmi10to1serializer1_cdc_graycounter2_q <= 3'd0;
        videohdmi10to1serializer1_cdc_graycounter2_q_binary <= 3'd0;
        tmdsencoder2_out <= 10'd0;
        tmdsencoder2_d1 <= 8'd0;
        tmdsencoder2_n1d <= 4'd0;
        tmdsencoder2_q_m <= 9'd0;
        tmdsencoder2_q_m_r <= 9'd0;
        tmdsencoder2_n0q_m <= 4'd0;
        tmdsencoder2_n1q_m <= 4'd0;
        tmdsencoder2_cnt <= 6'd0;
        tmdsencoder2_new_c0 <= 2'd0;
        tmdsencoder2_new_de0 <= 1'd0;
        tmdsencoder2_new_c1 <= 2'd0;
        tmdsencoder2_new_de1 <= 1'd0;
        tmdsencoder2_new_c2 <= 2'd0;
        tmdsencoder2_new_de2 <= 1'd0;
        videohdmi10to1serializer2_cdc_graycounter4_q <= 3'd0;
        videohdmi10to1serializer2_cdc_graycounter4_q_binary <= 3'd0;
        vtg_source_payload_hsync <= 1'd0;
        vtg_source_payload_vsync <= 1'd0;
        vtg_source_payload_hres <= 12'd0;
        vtg_source_payload_vres <= 12'd0;
        vtg_source_payload_hcount <= 12'd0;
        vtg_source_payload_vcount <= 12'd0;
        vtg_hactive <= 1'd0;
        vtg_vactive <= 1'd0;
        colorbarspattern_pix <= 12'd0;
        colorbarspattern_bar <= 3'd0;
        basesoc_videotiminggenerator_state <= 1'd0;
        basesoc_colorbarspattern_state <= 1'd0;
    end
    xilinxmultiregimpl1_regs0 <= videohdmi10to1serializer0_cdc_graycounter1_q;
    xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
    xilinxmultiregimpl3_regs0 <= videohdmi10to1serializer1_cdc_graycounter3_q;
    xilinxmultiregimpl3_regs1 <= xilinxmultiregimpl3_regs0;
    xilinxmultiregimpl5_regs0 <= videohdmi10to1serializer2_cdc_graycounter5_q;
    xilinxmultiregimpl5_regs1 <= xilinxmultiregimpl5_regs0;
    xilinxmultiregimpl6_regs0 <= vtg_enable_storage;
    xilinxmultiregimpl6_regs1 <= xilinxmultiregimpl6_regs0;
    xilinxmultiregimpl7_regs0 <= vtg_hres_storage;
    xilinxmultiregimpl7_regs1 <= xilinxmultiregimpl7_regs0;
    xilinxmultiregimpl8_regs0 <= vtg_hsync_start_storage;
    xilinxmultiregimpl8_regs1 <= xilinxmultiregimpl8_regs0;
    xilinxmultiregimpl9_regs0 <= vtg_hsync_end_storage;
    xilinxmultiregimpl9_regs1 <= xilinxmultiregimpl9_regs0;
    xilinxmultiregimpl10_regs0 <= vtg_hscan_storage;
    xilinxmultiregimpl10_regs1 <= xilinxmultiregimpl10_regs0;
    xilinxmultiregimpl11_regs0 <= vtg_vres_storage;
    xilinxmultiregimpl11_regs1 <= xilinxmultiregimpl11_regs0;
    xilinxmultiregimpl12_regs0 <= vtg_vsync_start_storage;
    xilinxmultiregimpl12_regs1 <= xilinxmultiregimpl12_regs0;
    xilinxmultiregimpl13_regs0 <= vtg_vsync_end_storage;
    xilinxmultiregimpl13_regs1 <= xilinxmultiregimpl13_regs0;
    xilinxmultiregimpl14_regs0 <= vtg_vscan_storage;
    xilinxmultiregimpl14_regs1 <= xilinxmultiregimpl14_regs0;
    xilinxmultiregimpl15_regs0 <= colorbarspattern_enable0;
    xilinxmultiregimpl15_regs1 <= xilinxmultiregimpl15_regs0;
end

always @(posedge hdmi5x_clk) begin
    videohdmi10to1serializer0_cdc_graycounter1_q_binary <= videohdmi10to1serializer0_cdc_graycounter1_q_next_binary;
    videohdmi10to1serializer0_cdc_graycounter1_q <= videohdmi10to1serializer0_cdc_graycounter1_q_next;
    if (videohdmi10to1serializer0_i_inc) begin
        videohdmi10to1serializer0_i_count <= (videohdmi10to1serializer0_i_count + 1'd1);
        if ((videohdmi10to1serializer0_i_count == 1'd1)) begin
            videohdmi10to1serializer0_i_count <= 1'd0;
        end
    end
    if (videohdmi10to1serializer0_o_inc) begin
        videohdmi10to1serializer0_o_count <= (videohdmi10to1serializer0_o_count + 1'd1);
        if ((videohdmi10to1serializer0_o_count == 4'd9)) begin
            videohdmi10to1serializer0_o_count <= 1'd0;
        end
    end
    if ((videohdmi10to1serializer0_i_inc & (~videohdmi10to1serializer0_o_inc))) begin
        videohdmi10to1serializer0_level <= (videohdmi10to1serializer0_level + 4'd10);
    end
    if (((~videohdmi10to1serializer0_i_inc) & videohdmi10to1serializer0_o_inc)) begin
        videohdmi10to1serializer0_level <= (videohdmi10to1serializer0_level - 2'd2);
    end
    if ((videohdmi10to1serializer0_i_inc & videohdmi10to1serializer0_o_inc)) begin
        videohdmi10to1serializer0_level <= ((videohdmi10to1serializer0_level + 4'd10) - 2'd2);
    end
    if ((videohdmi10to1serializer0_sink_valid & videohdmi10to1serializer0_sink_ready)) begin
        case (videohdmi10to1serializer0_i_count)
            1'd0: begin
                videohdmi10to1serializer0_shift_register[19:10] <= videohdmi10to1serializer0_i_data;
            end
            1'd1: begin
                videohdmi10to1serializer0_shift_register[9:0] <= videohdmi10to1serializer0_i_data;
            end
        endcase
    end
    videohdmi10to1serializer1_cdc_graycounter3_q_binary <= videohdmi10to1serializer1_cdc_graycounter3_q_next_binary;
    videohdmi10to1serializer1_cdc_graycounter3_q <= videohdmi10to1serializer1_cdc_graycounter3_q_next;
    if (videohdmi10to1serializer1_i_inc) begin
        videohdmi10to1serializer1_i_count <= (videohdmi10to1serializer1_i_count + 1'd1);
        if ((videohdmi10to1serializer1_i_count == 1'd1)) begin
            videohdmi10to1serializer1_i_count <= 1'd0;
        end
    end
    if (videohdmi10to1serializer1_o_inc) begin
        videohdmi10to1serializer1_o_count <= (videohdmi10to1serializer1_o_count + 1'd1);
        if ((videohdmi10to1serializer1_o_count == 4'd9)) begin
            videohdmi10to1serializer1_o_count <= 1'd0;
        end
    end
    if ((videohdmi10to1serializer1_i_inc & (~videohdmi10to1serializer1_o_inc))) begin
        videohdmi10to1serializer1_level <= (videohdmi10to1serializer1_level + 4'd10);
    end
    if (((~videohdmi10to1serializer1_i_inc) & videohdmi10to1serializer1_o_inc)) begin
        videohdmi10to1serializer1_level <= (videohdmi10to1serializer1_level - 2'd2);
    end
    if ((videohdmi10to1serializer1_i_inc & videohdmi10to1serializer1_o_inc)) begin
        videohdmi10to1serializer1_level <= ((videohdmi10to1serializer1_level + 4'd10) - 2'd2);
    end
    if ((videohdmi10to1serializer1_sink_valid & videohdmi10to1serializer1_sink_ready)) begin
        case (videohdmi10to1serializer1_i_count)
            1'd0: begin
                videohdmi10to1serializer1_shift_register[19:10] <= videohdmi10to1serializer1_i_data;
            end
            1'd1: begin
                videohdmi10to1serializer1_shift_register[9:0] <= videohdmi10to1serializer1_i_data;
            end
        endcase
    end
    videohdmi10to1serializer2_cdc_graycounter5_q_binary <= videohdmi10to1serializer2_cdc_graycounter5_q_next_binary;
    videohdmi10to1serializer2_cdc_graycounter5_q <= videohdmi10to1serializer2_cdc_graycounter5_q_next;
    if (videohdmi10to1serializer2_i_inc) begin
        videohdmi10to1serializer2_i_count <= (videohdmi10to1serializer2_i_count + 1'd1);
        if ((videohdmi10to1serializer2_i_count == 1'd1)) begin
            videohdmi10to1serializer2_i_count <= 1'd0;
        end
    end
    if (videohdmi10to1serializer2_o_inc) begin
        videohdmi10to1serializer2_o_count <= (videohdmi10to1serializer2_o_count + 1'd1);
        if ((videohdmi10to1serializer2_o_count == 4'd9)) begin
            videohdmi10to1serializer2_o_count <= 1'd0;
        end
    end
    if ((videohdmi10to1serializer2_i_inc & (~videohdmi10to1serializer2_o_inc))) begin
        videohdmi10to1serializer2_level <= (videohdmi10to1serializer2_level + 4'd10);
    end
    if (((~videohdmi10to1serializer2_i_inc) & videohdmi10to1serializer2_o_inc)) begin
        videohdmi10to1serializer2_level <= (videohdmi10to1serializer2_level - 2'd2);
    end
    if ((videohdmi10to1serializer2_i_inc & videohdmi10to1serializer2_o_inc)) begin
        videohdmi10to1serializer2_level <= ((videohdmi10to1serializer2_level + 4'd10) - 2'd2);
    end
    if ((videohdmi10to1serializer2_sink_valid & videohdmi10to1serializer2_sink_ready)) begin
        case (videohdmi10to1serializer2_i_count)
            1'd0: begin
                videohdmi10to1serializer2_shift_register[19:10] <= videohdmi10to1serializer2_i_data;
            end
            1'd1: begin
                videohdmi10to1serializer2_shift_register[9:0] <= videohdmi10to1serializer2_i_data;
            end
        endcase
    end
    if (hdmi5x_rst) begin
        videohdmi10to1serializer0_cdc_graycounter1_q <= 3'd0;
        videohdmi10to1serializer0_cdc_graycounter1_q_binary <= 3'd0;
        videohdmi10to1serializer0_level <= 5'd0;
        videohdmi10to1serializer0_i_count <= 1'd0;
        videohdmi10to1serializer0_o_count <= 4'd0;
        videohdmi10to1serializer1_cdc_graycounter3_q <= 3'd0;
        videohdmi10to1serializer1_cdc_graycounter3_q_binary <= 3'd0;
        videohdmi10to1serializer1_level <= 5'd0;
        videohdmi10to1serializer1_i_count <= 1'd0;
        videohdmi10to1serializer1_o_count <= 4'd0;
        videohdmi10to1serializer2_cdc_graycounter5_q <= 3'd0;
        videohdmi10to1serializer2_cdc_graycounter5_q_binary <= 3'd0;
        videohdmi10to1serializer2_level <= 5'd0;
        videohdmi10to1serializer2_i_count <= 1'd0;
        videohdmi10to1serializer2_o_count <= 4'd0;
    end
    xilinxmultiregimpl0_regs0 <= videohdmi10to1serializer0_cdc_graycounter0_q;
    xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
    xilinxmultiregimpl2_regs0 <= videohdmi10to1serializer1_cdc_graycounter2_q;
    xilinxmultiregimpl2_regs1 <= xilinxmultiregimpl2_regs0;
    xilinxmultiregimpl4_regs0 <= videohdmi10to1serializer2_cdc_graycounter4_q;
    xilinxmultiregimpl4_regs1 <= xilinxmultiregimpl4_regs0;
end

always @(posedge sys_clk) begin
    if ((bus_errors != 32'd4294967295)) begin
        if (bus_error) begin
            bus_errors <= (bus_errors + 1'd1);
        end
    end
    if (csr_bankarray_csrbank0_reset0_re) begin
        reset_storage[1:0] <= csr_bankarray_csrbank0_reset0_r;
    end
    reset_re <= csr_bankarray_csrbank0_reset0_re;
    if (csr_bankarray_csrbank0_scratch0_re) begin
        scratch_storage[31:0] <= csr_bankarray_csrbank0_scratch0_r;
    end
    scratch_re <= csr_bankarray_csrbank0_scratch0_re;
    bus_errors_re <= csr_bankarray_csrbank0_bus_errors_re;
    if (uart_tx_clear) begin
        uart_tx_pending <= 1'd0;
    end
    uart_tx_trigger_d <= uart_tx_trigger;
    if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
        uart_tx_pending <= 1'd1;
    end
    if (uart_rx_clear) begin
        uart_rx_pending <= 1'd0;
    end
    uart_rx_trigger_d <= uart_rx_trigger;
    if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
        uart_rx_pending <= 1'd1;
    end
    if (timer_en_storage) begin
        if ((timer_value == 1'd0)) begin
            timer_value <= timer_reload_storage;
        end else begin
            timer_value <= (timer_value - 1'd1);
        end
    end else begin
        timer_value <= timer_load_storage;
    end
    if (timer_update_value_re) begin
        timer_value_status <= timer_value;
    end
    if (timer_zero_clear) begin
        timer_zero_pending <= 1'd0;
    end
    timer_zero_trigger_d <= timer_zero_trigger;
    if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
        timer_zero_pending <= 1'd1;
    end
    if (done) begin
        chaser <= {chaser, (~chaser[7])};
    end
    if (re) begin
        mode <= 1'd1;
    end
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 23'd6250000;
    end
    basesoc_state <= basesoc_next_state;
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_out0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank1_out0_re) begin
        storage[7:0] <= csr_bankarray_csrbank1_out0_r;
    end
    re <= csr_bankarray_csrbank1_out0_re;
    csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank2_sel) begin
        case (csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_value_w;
            end
            3'd5: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank2_load0_re) begin
        timer_load_storage[31:0] <= csr_bankarray_csrbank2_load0_r;
    end
    timer_load_re <= csr_bankarray_csrbank2_load0_re;
    if (csr_bankarray_csrbank2_reload0_re) begin
        timer_reload_storage[31:0] <= csr_bankarray_csrbank2_reload0_r;
    end
    timer_reload_re <= csr_bankarray_csrbank2_reload0_re;
    if (csr_bankarray_csrbank2_en0_re) begin
        timer_en_storage <= csr_bankarray_csrbank2_en0_r;
    end
    timer_en_re <= csr_bankarray_csrbank2_en0_re;
    if (csr_bankarray_csrbank2_update_value0_re) begin
        timer_update_value_storage <= csr_bankarray_csrbank2_update_value0_r;
    end
    timer_update_value_re <= csr_bankarray_csrbank2_update_value0_re;
    timer_value_re <= csr_bankarray_csrbank2_value_re;
    timer_status_re <= csr_bankarray_csrbank2_ev_status_re;
    if (csr_bankarray_csrbank2_ev_pending_re) begin
        timer_pending_r <= csr_bankarray_csrbank2_ev_pending_r;
    end
    timer_pending_re <= csr_bankarray_csrbank2_ev_pending_re;
    if (csr_bankarray_csrbank2_ev_enable0_re) begin
        timer_enable_storage <= csr_bankarray_csrbank2_ev_enable0_r;
    end
    timer_enable_re <= csr_bankarray_csrbank2_ev_enable0_re;
    csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank3_sel) begin
        case (csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface3_bank_bus_dat_r <= uart_rxtx_w;
            end
            1'd1: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_txfull_w;
            end
            2'd2: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_rxempty_w;
            end
            2'd3: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_enable0_w;
            end
            3'd6: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_txempty_w;
            end
            3'd7: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_rxfull_w;
            end
        endcase
    end
    uart_txfull_re <= csr_bankarray_csrbank3_txfull_re;
    uart_rxempty_re <= csr_bankarray_csrbank3_rxempty_re;
    uart_status_re <= csr_bankarray_csrbank3_ev_status_re;
    if (csr_bankarray_csrbank3_ev_pending_re) begin
        uart_pending_r[1:0] <= csr_bankarray_csrbank3_ev_pending_r;
    end
    uart_pending_re <= csr_bankarray_csrbank3_ev_pending_re;
    if (csr_bankarray_csrbank3_ev_enable0_re) begin
        uart_enable_storage[1:0] <= csr_bankarray_csrbank3_ev_enable0_r;
    end
    uart_enable_re <= csr_bankarray_csrbank3_ev_enable0_re;
    uart_txempty_re <= csr_bankarray_csrbank3_txempty_re;
    uart_rxfull_re <= csr_bankarray_csrbank3_rxfull_re;
    csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank4_sel) begin
        case (csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_enable0_w;
            end
            1'd1: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_hres0_w;
            end
            2'd2: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_hsync_start0_w;
            end
            2'd3: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_hsync_end0_w;
            end
            3'd4: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_hscan0_w;
            end
            3'd5: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_vres0_w;
            end
            3'd6: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_vsync_start0_w;
            end
            3'd7: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_vsync_end0_w;
            end
            4'd8: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_vscan0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank4_enable0_re) begin
        vtg_enable_storage <= csr_bankarray_csrbank4_enable0_r;
    end
    vtg_enable_re <= csr_bankarray_csrbank4_enable0_re;
    if (csr_bankarray_csrbank4_hres0_re) begin
        vtg_hres_storage[11:0] <= csr_bankarray_csrbank4_hres0_r;
    end
    vtg_hres_re <= csr_bankarray_csrbank4_hres0_re;
    if (csr_bankarray_csrbank4_hsync_start0_re) begin
        vtg_hsync_start_storage[11:0] <= csr_bankarray_csrbank4_hsync_start0_r;
    end
    vtg_hsync_start_re <= csr_bankarray_csrbank4_hsync_start0_re;
    if (csr_bankarray_csrbank4_hsync_end0_re) begin
        vtg_hsync_end_storage[11:0] <= csr_bankarray_csrbank4_hsync_end0_r;
    end
    vtg_hsync_end_re <= csr_bankarray_csrbank4_hsync_end0_re;
    if (csr_bankarray_csrbank4_hscan0_re) begin
        vtg_hscan_storage[11:0] <= csr_bankarray_csrbank4_hscan0_r;
    end
    vtg_hscan_re <= csr_bankarray_csrbank4_hscan0_re;
    if (csr_bankarray_csrbank4_vres0_re) begin
        vtg_vres_storage[11:0] <= csr_bankarray_csrbank4_vres0_r;
    end
    vtg_vres_re <= csr_bankarray_csrbank4_vres0_re;
    if (csr_bankarray_csrbank4_vsync_start0_re) begin
        vtg_vsync_start_storage[11:0] <= csr_bankarray_csrbank4_vsync_start0_r;
    end
    vtg_vsync_start_re <= csr_bankarray_csrbank4_vsync_start0_re;
    if (csr_bankarray_csrbank4_vsync_end0_re) begin
        vtg_vsync_end_storage[11:0] <= csr_bankarray_csrbank4_vsync_end0_r;
    end
    vtg_vsync_end_re <= csr_bankarray_csrbank4_vsync_end0_re;
    if (csr_bankarray_csrbank4_vscan0_re) begin
        vtg_vscan_storage[11:0] <= csr_bankarray_csrbank4_vscan0_r;
    end
    vtg_vscan_re <= csr_bankarray_csrbank4_vscan0_re;
    if (sys_rst) begin
        reset_storage <= 2'd0;
        reset_re <= 1'd0;
        scratch_storage <= 32'd305419896;
        scratch_re <= 1'd0;
        bus_errors_re <= 1'd0;
        bus_errors <= 32'd0;
        uart_txfull_re <= 1'd0;
        uart_rxempty_re <= 1'd0;
        uart_tx_pending <= 1'd0;
        uart_tx_trigger_d <= 1'd0;
        uart_rx_pending <= 1'd0;
        uart_rx_trigger_d <= 1'd0;
        uart_status_re <= 1'd0;
        uart_pending_re <= 1'd0;
        uart_pending_r <= 2'd0;
        uart_enable_storage <= 2'd0;
        uart_enable_re <= 1'd0;
        uart_txempty_re <= 1'd0;
        uart_rxfull_re <= 1'd0;
        timer_load_storage <= 32'd0;
        timer_load_re <= 1'd0;
        timer_reload_storage <= 32'd0;
        timer_reload_re <= 1'd0;
        timer_en_storage <= 1'd0;
        timer_en_re <= 1'd0;
        timer_update_value_storage <= 1'd0;
        timer_update_value_re <= 1'd0;
        timer_value_status <= 32'd0;
        timer_value_re <= 1'd0;
        timer_zero_pending <= 1'd0;
        timer_zero_trigger_d <= 1'd0;
        timer_status_re <= 1'd0;
        timer_pending_re <= 1'd0;
        timer_pending_r <= 1'd0;
        timer_enable_storage <= 1'd0;
        timer_enable_re <= 1'd0;
        timer_value <= 32'd0;
        vtg_enable_storage <= 1'd1;
        vtg_enable_re <= 1'd0;
        vtg_hres_storage <= 12'd640;
        vtg_hres_re <= 1'd0;
        vtg_hsync_start_storage <= 12'd656;
        vtg_hsync_start_re <= 1'd0;
        vtg_hsync_end_storage <= 12'd752;
        vtg_hsync_end_re <= 1'd0;
        vtg_hscan_storage <= 12'd799;
        vtg_hscan_re <= 1'd0;
        vtg_vres_storage <= 12'd480;
        vtg_vres_re <= 1'd0;
        vtg_vsync_start_storage <= 12'd490;
        vtg_vsync_start_re <= 1'd0;
        vtg_vsync_end_storage <= 12'd492;
        vtg_vsync_end_re <= 1'd0;
        vtg_vscan_storage <= 12'd524;
        vtg_vscan_re <= 1'd0;
        storage <= 8'd0;
        re <= 1'd0;
        chaser <= 8'd0;
        mode <= 1'd0;
        count <= 23'd6250000;
        csr_bankarray_sel_r <= 1'd0;
        basesoc_state <= 1'd0;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

BUFG BUFG(
	.I(s7pll0_clkout),
	.O(s7pll0_clkout_buf)
);

BUFG BUFG_1(
	.I(s7pll1_clkout0),
	.O(s7pll1_clkout_buf0)
);

BUFG BUFG_2(
	.I(s7pll1_clkout1),
	.O(s7pll1_clkout_buf1)
);

//------------------------------------------------------------------------------
// Memory mem: 53-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:52];
initial begin
	$readmemh("hdmi_demo_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


OBUFDS OBUFDS(
	.I(pads_clk),
	.O(hdmi_out_clk_p),
	.OB(hdmi_out_clk_n)
);

//------------------------------------------------------------------------------
// Memory storage_1: 4-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_1[0:3];
reg [11:0] storage_1_dat0;
reg [11:0] storage_1_dat1;
always @(posedge hdmi_clk) begin
	if (videohdmi10to1serializer0_cdc_wrport_we)
		storage_1[videohdmi10to1serializer0_cdc_wrport_adr] <= videohdmi10to1serializer0_cdc_wrport_dat_w;
	storage_1_dat0 <= storage_1[videohdmi10to1serializer0_cdc_wrport_adr];
end
always @(posedge hdmi5x_clk) begin
	storage_1_dat1 <= storage_1[videohdmi10to1serializer0_cdc_rdport_adr];
end
assign videohdmi10to1serializer0_cdc_wrport_dat_r = storage_1_dat0;
assign videohdmi10to1serializer0_cdc_rdport_dat_r = storage_1_dat1;


OBUFDS OBUFDS_1(
	.I(pad_o0),
	.O(hdmi_out_data0_p),
	.OB(hdmi_out_data0_n)
);

//------------------------------------------------------------------------------
// Memory storage_2: 4-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_2[0:3];
reg [11:0] storage_2_dat0;
reg [11:0] storage_2_dat1;
always @(posedge hdmi_clk) begin
	if (videohdmi10to1serializer1_cdc_wrport_we)
		storage_2[videohdmi10to1serializer1_cdc_wrport_adr] <= videohdmi10to1serializer1_cdc_wrport_dat_w;
	storage_2_dat0 <= storage_2[videohdmi10to1serializer1_cdc_wrport_adr];
end
always @(posedge hdmi5x_clk) begin
	storage_2_dat1 <= storage_2[videohdmi10to1serializer1_cdc_rdport_adr];
end
assign videohdmi10to1serializer1_cdc_wrport_dat_r = storage_2_dat0;
assign videohdmi10to1serializer1_cdc_rdport_dat_r = storage_2_dat1;


OBUFDS OBUFDS_2(
	.I(pad_o1),
	.O(hdmi_out_data1_p),
	.OB(hdmi_out_data1_n)
);

//------------------------------------------------------------------------------
// Memory storage_3: 4-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_3[0:3];
reg [11:0] storage_3_dat0;
reg [11:0] storage_3_dat1;
always @(posedge hdmi_clk) begin
	if (videohdmi10to1serializer2_cdc_wrport_we)
		storage_3[videohdmi10to1serializer2_cdc_wrport_adr] <= videohdmi10to1serializer2_cdc_wrport_dat_w;
	storage_3_dat0 <= storage_3[videohdmi10to1serializer2_cdc_wrport_adr];
end
always @(posedge hdmi5x_clk) begin
	storage_3_dat1 <= storage_3[videohdmi10to1serializer2_cdc_rdport_adr];
end
assign videohdmi10to1serializer2_cdc_wrport_dat_r = storage_3_dat0;
assign videohdmi10to1serializer2_cdc_rdport_dat_r = storage_3_dat1;


OBUFDS OBUFDS_3(
	.I(pad_o2),
	.O(hdmi_out_data2_p),
	.OB(hdmi_out_data2_n)
);

FDCE FDCE(
	.C(s7pll0_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(pll_reset),
	.Q(basesoc_s7pll0_reset0)
);

FDCE FDCE_1(
	.C(s7pll0_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll0_reset0),
	.Q(basesoc_s7pll0_reset1)
);

FDCE FDCE_2(
	.C(s7pll0_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll0_reset1),
	.Q(basesoc_s7pll0_reset2)
);

FDCE FDCE_3(
	.C(s7pll0_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll0_reset2),
	.Q(basesoc_s7pll0_reset3)
);

FDCE FDCE_4(
	.C(s7pll0_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll0_reset3),
	.Q(basesoc_s7pll0_reset4)
);

FDCE FDCE_5(
	.C(s7pll0_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll0_reset4),
	.Q(basesoc_s7pll0_reset5)
);

FDCE FDCE_6(
	.C(s7pll0_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll0_reset5),
	.Q(basesoc_s7pll0_reset6)
);

FDCE FDCE_7(
	.C(s7pll0_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll0_reset6),
	.Q(basesoc_s7pll0_reset7)
);

PLLE2_ADV #(
	.CLKFBOUT_MULT(4'd9),
	.CLKIN1_PERIOD(5.0),
	.CLKOUT0_DIVIDE(5'd18),
	.CLKOUT0_PHASE(1'd0),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01),
	.STARTUP_WAIT("FALSE")
) PLLE2_ADV (
	.CLKFBIN(basesoc_s7pll0_pll_fb),
	.CLKIN1(s7pll0_clkin),
	.PWRDWN(pll_power_down),
	.RST(basesoc_s7pll0_reset7),
	.CLKFBOUT(basesoc_s7pll0_pll_fb),
	.CLKOUT0(s7pll0_clkout),
	.LOCKED(pll_locked)
);

FDCE FDCE_8(
	.C(s7pll1_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(pll2_reset),
	.Q(basesoc_s7pll1_reset0)
);

FDCE FDCE_9(
	.C(s7pll1_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll1_reset0),
	.Q(basesoc_s7pll1_reset1)
);

FDCE FDCE_10(
	.C(s7pll1_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll1_reset1),
	.Q(basesoc_s7pll1_reset2)
);

FDCE FDCE_11(
	.C(s7pll1_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll1_reset2),
	.Q(basesoc_s7pll1_reset3)
);

FDCE FDCE_12(
	.C(s7pll1_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll1_reset3),
	.Q(basesoc_s7pll1_reset4)
);

FDCE FDCE_13(
	.C(s7pll1_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll1_reset4),
	.Q(basesoc_s7pll1_reset5)
);

FDCE FDCE_14(
	.C(s7pll1_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll1_reset5),
	.Q(basesoc_s7pll1_reset6)
);

FDCE FDCE_15(
	.C(s7pll1_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(basesoc_s7pll1_reset6),
	.Q(basesoc_s7pll1_reset7)
);

PLLE2_ADV #(
	.CLKFBOUT_MULT(6'd35),
	.CLKIN1_PERIOD(20.0),
	.CLKOUT0_DIVIDE(7'd70),
	.CLKOUT0_PHASE(1'd0),
	.CLKOUT1_DIVIDE(4'd14),
	.CLKOUT1_PHASE(1'd0),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01),
	.STARTUP_WAIT("FALSE")
) PLLE2_ADV_1 (
	.CLKFBIN(basesoc_s7pll1_pll_fb),
	.CLKIN1(s7pll1_clkin),
	.PWRDWN(pll2_power_down),
	.RST(basesoc_s7pll1_reset7),
	.CLKFBOUT(basesoc_s7pll1_pll_fb),
	.CLKOUT0(s7pll1_clkout0),
	.CLKOUT1(s7pll1_clkout1),
	.LOCKED(pll2_locked)
);

IBUFDS IBUFDS(
	.I(clk200_p),
	.IB(clk200_n),
	.O(s7pll0_clkin)
);

(* ars_ff1 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE (
	.C(sys_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl0),
	.Q(xilinxasyncresetsynchronizerimpl0_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_1 (
	.C(sys_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl0_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl0),
	.Q(sys_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_2 (
	.C(hdmi_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl1),
	.Q(xilinxasyncresetsynchronizerimpl1_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_3 (
	.C(hdmi_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl1_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl1),
	.Q(hdmi_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_4 (
	.C(hdmi5x_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl2),
	.Q(xilinxasyncresetsynchronizerimpl2_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_5 (
	.C(hdmi5x_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl2_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl2),
	.Q(hdmi5x_rst)
);

ODDR #(
	.DDR_CLK_EDGE("SAME_EDGE")
) ODDR (
	.C(hdmi_clk),
	.CE(1'd1),
	.D1(1'd1),
	.D2(1'd0),
	.R(1'd0),
	.S(1'd0),
	.Q(pads_clk)
);

ODDR #(
	.DDR_CLK_EDGE("SAME_EDGE")
) ODDR_1 (
	.C(hdmi5x_clk),
	.CE(1'd1),
	.D1(videohdmi10to1serializer0_source_payload_data[0]),
	.D2(videohdmi10to1serializer0_source_payload_data[1]),
	.R(1'd0),
	.S(1'd0),
	.Q(pad_o0)
);

ODDR #(
	.DDR_CLK_EDGE("SAME_EDGE")
) ODDR_2 (
	.C(hdmi5x_clk),
	.CE(1'd1),
	.D1(videohdmi10to1serializer1_source_payload_data[0]),
	.D2(videohdmi10to1serializer1_source_payload_data[1]),
	.R(1'd0),
	.S(1'd0),
	.Q(pad_o1)
);

ODDR #(
	.DDR_CLK_EDGE("SAME_EDGE")
) ODDR_3 (
	.C(hdmi5x_clk),
	.CE(1'd1),
	.D1(videohdmi10to1serializer2_source_payload_data[0]),
	.D2(videohdmi10to1serializer2_source_payload_data[1]),
	.R(1'd0),
	.S(1'd0),
	.Q(pad_o2)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-06-08 05:16:50.
//------------------------------------------------------------------------------
